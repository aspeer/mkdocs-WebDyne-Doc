{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"00_introduction/","title":"Introduction","text":"<p>WebDyne is a Perl based dynamic HTML engine. It works with web servers (or from the command line) to render HTML documents with embedded Perl code.</p> <p>Once WebDyne is installed and initialised any file with a <code>.psp</code> extension is treated as a WebDyne source file. It is parsed for WebDyne pseudo-tags (such as <code>&lt;perl&gt;</code> and <code>&lt;block&gt;</code>) which are interpreted and executed on the server. The resulting output is then sent to the browser.</p> <p>WebDyne works with common web server persistent Perl interpreters - such as Apache <code>mod_perl</code> and <code>PSGI</code> - to provide fast dynamic content. It works with PSGI servers such as Plack and Starman, and can be implemented as a Docker container to run HTML with embedded Perl code.</p> <p>Pages are parsed once, then stored in a partially compiled format - speeding up subsequent processing by avoiding the need to re-parse a page each time it is loaded.</p> <p>Alternate syntaxes are available to enable WebDyne code to be used with editors that do not recognise custom HTML tags, and the syntax supports the use of PHP type processing instruction tags (<code>&lt;?..?&gt;</code>) or <code>&lt;div&gt;</code> tags (via data attributes such as <code>&lt;div data-webdyne-perl&gt;</code>) to define WebDyne blocks.</p> <p>Perl code can be co-mingled in the HTML code for \"quick and dirty\" pages or completed isolated into separate files or modules for separation of presentation and logic layers. You can see examples in a dedicated section - but here are a few very simple examples as an overview.</p> <p>Simple HTML file with Perl code embedded using WebDyne :</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Server Time&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\nThe local server time is:\n&lt;perl&gt; localtime() &lt;/perl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>This can be abbreviated with some WebDyne shortcut tags such as <code>&lt;start_html&gt;</code>. This does exactly the same thing and still renders compliant HTML to the browser:</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nThe local server time is: &lt;? localtime() ?&gt;\n</code></pre> <p>Run</p> <p>Don't like the co-mingling code and HTML but still want things in one file ?</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nThe local server time is &lt;? print_time() ?&gt;\n&lt;/html&gt;\n__PERL__\nsub print_time {\n    print(scalar localtime);\n}\n</code></pre> <p>Run</p> <p>Want further code and HTML separation ? You can import methods from any external Perl module. Example from a core module below, but could be any installed CPAN module or your own code:</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nServer Time::HiRes time:\n&lt;perl require=\"Time::HiRes\" import=\"time\"&gt;time()&lt;/perl&gt;\n</code></pre> <p>Run</p> <p>Same concepts implemented in slightly different ways:</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nThe local server epoch time (hires) is: &lt;? time() ?&gt;\n&lt;end_html&gt;\n__PERL__\nuse Time::HiRes qw(time);\n1;\n</code></pre> <p>Run</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\n&lt;perl require=\"Time::HiRes\" import=\"time\"/&gt;\nThe local server time (hires) is: &lt;? time() ?&gt;\n</code></pre> <p>Run</p> <p>Using an editor that doesn't like custom tags ? Use of the &lt;div&gt; tag with a <code>data-*</code> attribute is legal HTML syntax and can be used to embed Perl:</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nThe local server time is: &lt;div data-webdyne-perl&gt; localtime() &lt;/div&gt;\n</code></pre> <p>Run</p> <p>Don't like &lt;div&gt; style syntax ? Put the code in a &lt;script&gt; block - it will be interpreted on the server, not the client:</p> <pre><code>&lt;start_html title=\"Server Time\"&gt;\nServer local time is: \n&lt;script type=\"application/perl\"&gt;\n    print scalar localtime()\n&lt;/script&gt;\n</code></pre> <p>Run</p> <p>Template blocks and variable replacement is supported also:</p> <pre><code>&lt;start_html&gt;\n\n&lt;!-- Call perl code to render server time --&gt;\n&lt;perl handler=\"server_time\"&gt;\n\n&lt;!-- Template Block it will be rendered into --&gt;\n&lt;block name=\"server_time\"&gt;\n&lt;p&gt;\nLoop ${i}: The local server time is: ${time}\n&lt;/block&gt;\n\n&lt;/perl&gt;\n\n__PERL__\n\nsub server_time {\n\n    #  Get self ref\n    #\n    my $self=shift();\n\n    #  Get local time\n    #\n    my $time=scalar localtime();\n\n    #  Loop 4 times\n    #\n    foreach my $i (1..4) {\n\n        #  Render template block\n        #\n        $self-&gt;render_block('server_time', i=&gt;$i, time=&gt;$time)\n\n    }\n\n    #  Return section\n    #\n    return $self-&gt;render()\n\n}\n</code></pre> <p>Run</p>"},{"location":"01_installation_and_quickstart/","title":"Installation and Quickstart","text":""},{"location":"01_installation_and_quickstart/#prerequisites","title":"Prerequisites","text":"<p>WebDyne will install and run on any modern Linux system that has a recent version of Perl installed and is capable of installing Perl module via CPAN. Installation via Docker is also supported.</p> <p>When installing WebDyne there are two components which are required before you can begin serving .psp files:</p> <ul> <li> <p>The core WebDyne Perl modules</p> </li> <li> <p>A web server configured to use WebDyne</p> </li> </ul> <p>WebDyne will work with Apache mod_perl or PSGI compatible web servers (such as Plack, Starman etc.).</p> <p>Docker containers with pre-built versions of WebDyne are also available.</p>"},{"location":"01_installation_and_quickstart/#installing-via-cpan-or-cpanminus","title":"Installing via CPAN or CPANMinus","text":"<p>Install from the Perl CPAN library using <code>cpan</code> or <code>cpanm</code> utilities. Installs dependencies if required (also from CPAN).</p> <p>Destination of the installed files is dependent on the local CPAN configuration, however in most cases it will be to the Perl site library location. WebDyne supports installation to an alternate location using the PREFIX option in CPAN. Binaries are usually installed to <code>/usr/bin</code> or <code>/usr/local/bin</code> by CPAN, but may vary by distribution/local configuration.</p> <p>Assuming your CPAN environment is setup correctly you can run the command:</p> <p><code>perl -MCPAN -e \"install WebDyne\"</code></p> <p>Or (with <code>cpanminus</code> if installed)</p> <p><code>cpanm WebDyne</code></p> <p>This will install the base WebDyne modules, which includes the Apache config utility and PSGI version. Note that Apache or PSGI servers and dependencies such as Plack or Starman are not installed by default and need to be installed separately - see the relevant section.</p> <p>Once installed you will need to configure your web server to use WebDyne to serve files with the <code>.psp</code> extension if using Apache - see section below.</p>"},{"location":"01_installation_and_quickstart/#quickstart","title":"Quickstart","text":"<p>If using PSGI you can start a quick web server with:</p> <pre><code>#  Render a file to STDOUT to see the HTML\n#\n$ wdrender app.psp\n\n#  Install Plack\n#\n$ cpanm Plack\n\n#  Check all working\n#\n$ webdyne.psgi --test\n\n#  Start serving only a single PSP file\n#\n$ webdyne.psgi app.psp\n\n# Start serving any file in the current directory, using app.psp as the default\n#\n$ webdyne.psgi .\n\n# Start but listen on non-default port, only on localhost\n#\n$ webdyne.psgi --port=5001 --host=127.0.0.1\n</code></pre> <p>Connect your browser to the host and you should see the WebDyne output</p>"},{"location":"01_installation_and_quickstart/#apache-mod_perl","title":"Apache mod_perl","text":"<p>If using Apache with mod_perl you can initialise WebDyne using the <code>wdapacheinit</code> command. This will attempt to auto-discover where the Apache binary and configuration files are, then add a suitable <code>webdyne.conf</code> file to the apache configuration. Apache will need to be restarted for the new configuration file to take effect. This will need to be done as a the root user.</p> <pre><code>[root@localhost ~]# wdapacheinit \n\n[install] - Installation source directory '/usr'.\n[install] - Creating cache directory '/var/cache/webdyne'.\n\n[install] - Writing Apache config file '/etc/httpd/conf.d/webdyne.conf'.\n[install] - Writing Webdyne config file '/etc/httpd/conf.d/webdyne_conf.pl'.\n[install] - Apache uses conf.d directory - not changing httpd.conf file.\n[install] - Granting Apache (apache.apache) ownership of cache directory '/var/cache/webdyne'.\n[install] - Install completed.\n\n[root@localhost ~]# systemctl restart httpd\n</code></pre> <p>By default WebDyne will create a cache directory in <code>/var/cache/webdyne</code> on Linux systems when a default CPAN install is done (no PREFIX specified). If a PREFIX is specified the cache directory will be created as <code>$PREFIX/cache</code>. Use the <code>wdapacheinit</code> <code>--cache</code> command-line option to specify an alternate location.</p> <p>Once <code>wdapacheinit</code> has been run the Apache server should be reloaded or restarted. Use a method appropriate for your Linux distribution.</p> <pre><code>[root@localhost ~]# systemctl httpd restart\nStopping httpd:                                            [  OK  ]\nStarting httpd:                                            [  OK  ]\n</code></pre>"},{"location":"01_installation_and_quickstart/#manual-configuration-of-apache","title":"Manual configuration of Apache","text":"<p>If the <code>wdapacheinit</code> command does not work as expected on your system then the Apache config files can be modified manually.</p> <p>Include the following section in the Apache httpd.conf file (or create a webdyne.conf file if you distribution supports conf.d style configuration files). These following config files are written with Apache 2.4 syntax - adjust path and syntax as required:</p> <pre><code>#  Need mod_perl, load up if not already done\n#\n&lt;IfModule !mod_perl.c&gt;\nLoadModule perl_module \"/etc/httpd/modules/mod_perl.so\"\n&lt;/IfModule&gt;\n\n#  Uncomment and update if using a local::lib location for Perl modules\n#\n#PerlSwitches -I/opt/perl -I/opt/otherperl\n\n#  Preload the WebDyne and WebDyne::Compile module\n#\nPerlModule    WebDyne WebDyne::Compile\n\n#  Associate psp files with WebDyne\n#\nAddHandler    modperl    .psp\nPerlHandler   WebDyne\n\n#  Set a directory for storage of cache files. Make sure this exists already is writable by the \n#  Apache daemon process.\n#\nPerlSetVar    WEBDYNE_CACHE_DN    '/opt/webdyne/cache'\n\n#  Allow Apache to access the cache directory if it needs to serve pre-compiled pages from there.\n#\n&lt;Directory \"/opt/webdyne/cache\"&gt;\nRequire all granted\n&lt;/Directory&gt;\n\n# Put variables in a separate file - best\n#\nPerlRequire conf.d/webdyne_constant.pl\n\n#  Or use &lt;Perl&gt; sections - but warning, certbot doesn't like this syntax in http conf files\n#\n&lt;Perl&gt;\n\n#  Error display/extended display on/off. Set to 1 to enable, 0 to disable\n#\n$WebDyne::WEBDYNE_ERROR_SHOW=1;\n$WebDyne::WEBDYNE_ERROR_SHOW_EXTENDED=1;\n&lt;/Perl&gt;\n</code></pre> <p>Important</p> <p>Substitute directory paths in the above example for the relevant/correct/appropriate ones on your system.</p> <p>Create the cache directory and assign ownership and permission appropriate for your distribution (group name will vary by distribution - locate the correct one for your distribution)</p> <pre><code>[root@localhost ~]# mkdir /opt/webdyne/cache\n[root@localhost ~]# chgrp apache /opt/webdyne/cache\n[root@localhost ~]# chmod 770 /opt/webdyne/cache\n</code></pre> <p>Restart Apache and check for any errors.</p>"},{"location":"01_installation_and_quickstart/#psgi","title":"PSGI","text":"<p>Ensure that Plack is installed on your system via CPAN:</p> <pre><code># Via CPAN\nperl -MCPAN -e 'install Plack'\n\n# Modern systems\n#\ncpan Plack\n\n# Or better via CPANM\ncpanm Plack\n</code></pre> <p>You can start a basic WebDyne server by running the webdyne.psgi command with the --test parameter</p> <pre><code>webdyne.psgi --test\n</code></pre> <p>This will start a PSGI web server on your machine listening to port 5000 (or port 5001 on a Mac). Open a connection to http://127.0.0.1:5000/ or the IP address of your server in your web browser to view the test page and validate the WebDyne is working correctly:</p> <p>Once verified as working correctly you can serve WebDyne content from a particular directory - or from a single file - using the syntax:</p> <pre><code>#  To serve up all files in a directory:\n#\n$ webdyne.psgi &lt;directory&gt;\n\n#  E.g serve files in /var/www/html. By default WebDyne will serve app.psp if no filename\n#  is specified\n#\n$ webdyne.psgi /var/www/html\n\n#  Allow static files such as css, jpg files etc. to be served also\n#\n$ webdyne.psgi --static /var/www/html/app.psp\n\n#  Or just a single app.psp file. Only this file will be served regardless of URL\n#\n$ webdyne.psgi /var/www/html/time.psp\n</code></pre> <p>The above starts a single-threaded web server using Plack. To start the more performant Starman server (assuming installed):</p> <pre><code>#  Start Starman instance. Substitute port + document root and location of webdyne.psgi\n#  as appropriate for your system.\n#\n$ DOCUMENT_ROOT=/var/www/html starman --port 5001 /usr/local/bin/webdyne.psgi\n</code></pre> <p>Note</p> <p>Starman does not support options such as --test and --static. If you want to server static files from starman you should do so using best practice via a traditional web server front end.</p> <p>Numerous options can be set from the command line via environment variables, including Webdyne configuration. See relevant section for all WebDyne configuration options but assuming in a local file webdyne.conf.pl:</p> <pre><code>#  Start instance webdyne.psgi using local config file\n#\n$ WEBDYNE_CONF=./webdyne.conf.pl webdyne.psgi --port=5012 .\n</code></pre>"},{"location":"01_installation_and_quickstart/#docker","title":"Docker","text":"<p>Docker containers are available from the Github Container Registry. Install the default Docker container (based on Debian) via:</p> <pre><code>#  Default debian version\n#\n$ docker pull ghcr.io/aspeer/webdyne:latest\n\n#  Or Alpine/Fedora/Perl versions\n#\n# docker pull ghcr.io/aspeer/webdyne-alpine:latest\n# docker pull ghcr.io/aspeer/webdyne-fedora:latest\n# docker pull ghcr.io/aspeer/webdyne-perl:latest\n</code></pre> <p>Start the docker container with the command:</p> <pre><code>$ docker run -e PORT=5002 -p 5002:5002 --name=webdyne webdyne\n</code></pre> <p>This will start WebDyne running on port 5002 on the host. Connecting to that location should show the server localtime test page</p> <p>To mount a local page and serve it through the docker container use the command:</p> <pre><code>docker run --mount &lt;local_dir&gt;:/app:ro -e PORT=5011 -e DOCUMENT_ROOT=/app -p 5011:5011 --name=webdyne webdyne\n</code></pre> <p>This will tell docker to mount the local directory into the docker container. If there is a default file named app.psp in the location it will be displayed. if there is a <code>cpanfile</code> in the mount directory any modules will be installed into the docker container automatically.</p>"},{"location":"01_installation_and_quickstart/#deploying-webdyne-apps-with-docker","title":"Deploying WebDyne apps with Docker","text":"<p>The WebDyne container can be used as the basis for new docker images containing your application files. Consider the following directory structure (available from Github as aspeer/psp-WebDyne-Fortune:</p> <pre><code>psp-WebDyne-Fortune/\n\u251c\u2500\u2500 app.pm\n\u251c\u2500\u2500 app.psp\n\u251c\u2500\u2500 cpanfile\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 webdyne.conf.pl\n</code></pre> <p>Where:</p> app.psp <p>The main and default psp file</p> app.pm <p>Perl code used in the psp file</p> cpanfile <p>A list of Perl modules to be installed in the docker container by cpanm</p> Dockerfile <p>The docker build file</p> webdyne.conf.pl <p>Any variables to be set for the WebDyne environment</p> <p>Constitute all the files needed to stand up a WebDyne based application in a Docker container. The contents of the Dockerfile are minimal:</p> <pre><code>FROM webdyne:latest\nWORKDIR /app\n# Debian packages needed for this app\nRUN apt-get update &amp;&amp; apt-get -y install fortunes\nCOPY app.* .\nCOPY cpanfile .\nCOPY webdyne.conf.pl /etc\n</code></pre> <p>Build the Docker container:</p> <pre><code>docker build  -t webdyne-app-fortune -f ./Dockerfile .\n</code></pre> <p>And run it:</p> <pre><code>docker run -e PORT=5010 -p 5010:5010 --name=webdyne-app-fortune webdyne-app-fortune\n</code></pre> <p>Your application should now be available:</p> <p></p>"},{"location":"02_basic_usage_examples/","title":"Basic Usage","text":"<p>Assuming the installation has completed with no errors you are now ready to start creating WebDyne pages and applications.</p>"},{"location":"02_basic_usage_examples/#integrating-perl-into-html","title":"Integrating Perl into HTML","text":"<p>Some code fragments to give a very high-level overview of how WebDyne can be implemented. First the most basic usage example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Note the perl tags --&gt;\n\nHello World &lt;perl&gt; localtime() &lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>So far not too exciting - after all we are mixing code and content. Lets try again:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Empty perl tag this time, but with method name as attribute --&gt;\n\nHello World &lt;perl method=\"hello\"/&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { return localtime }\n</code></pre> <p>Run</p> <p>Better - at least code and content are distinctly separated. Note that whatever the Perl code returns at the end of the routine is what is displayed. Although WebDyne will happily display returned strings or scalars, it is more efficient to return a scalar reference, e.g.:</p> <pre><code>#  Works\n#\nsub greeting { print \"Hello World\" }\n\n\n#  Is the same as\n#\nsub greeting { return \"Hello World\" }\nsub greeting { my $var=\"Hello World\"; return $var }\n\n\n# But best is\n#\nsub greeting { my $var=\"Hello World\"; return \\$var }\n\n\n# This will cause an error\n#\nsub greeting { return undef }\n\n\n# If you don't want to display anything return \\undef,\n#\nsub greeting { return \\undef }\n\n\n# This will fail also\n#\nsub greeting { return 0 }\n\n\n#  If you want \"0\" to be displayed ..\n#\nsub greeting { return \\0 }\n</code></pre> <p>Perl code in WebDyne pages must always return a non-undef/non-0/non-empty string value (i.e. it must return something that evals as \"true\"). If the code returns a non-true value (e.g. 0, undef, '') then WebDyne assumes an error has occurred in the routine. If you actually want to run some Perl code, but not display anything, you should return a reference to undef, (<code>\\undef)</code>, e.g.:</p> <pre><code>sub log { &amp;dosomething; return \\undef }\n</code></pre> <p>Up until now all the Perl code has been contained within the WebDyne file. The following example shows an instance where the code is contained in a separate Perl module, which should be available somewhere in the <code>@INC</code> path.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Perl tag with call to external module method --&gt;\n\nHello World &lt;perl handler=\"Digest::MD5::md5_hex\"/&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>If not already resident the module (in this case \"Digest::MD5\") will be loaded by WebDyne, so it must be available somewhere in the <code>@INC</code> path.</p>"},{"location":"02_basic_usage_examples/#use-of-the-perl-tag-for-in-line-code","title":"Use of the &lt;perl&gt; tag for in-line code.","text":"<p>The above examples show several variations of the &lt;perl&gt; tag in use. Perl code that is enclosed by &lt;perl&gt;..&lt;/perl&gt; tags is called in-line code:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;pre&gt;\n\n&lt;!-- Perl tag containing perl code which generates output --&gt;\n\n&lt;perl&gt;\n\nfor (0..3) {\n    print \"Hello World\\n\"\n}\n\n#  Must return a positive value, but don't want anything\n#  else displayed, so use \\undef\n#\nreturn \\undef;\n\n&lt;/perl&gt;\n\n\n&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>This is the most straight-forward use of Perl within a HTML document, but does not really make for easy reading - the Perl code and HTML are intermingled. It may be OK for quick scripts etc, but a page will quickly become hard to read if there is a lot of in-line Perl code interspersed between the HTML.</p> <p>in-line Perl can be useful if you want a \"quick\" computation, e.g. insertion of the current year:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Very quick and dirty block of perl code --&gt;\n\nCopyright (C) &lt;perl&gt;(localtime())[5]+1900&lt;/perl&gt; Foobar Gherkin corp.\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>Which can be pretty handy, but looks a bit cumbersome - the tags interfere with the flow of the text, making it harder to read. For this reason in-line perl can also be flagged in a WebDyne page using the shortcuts !{! .. !}, or by the use of processing instructions (&lt;? .. ?&gt;) e.g.:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Same code with alternative denotation --&gt;\n\nThe time is: !{! localtime() !}\n\n&lt;p&gt;\n\nThe time is:  &lt;? localtime() ?&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>The !{! .. !} denotation can also be used in tag attributes (processing instructions, and &lt;perl&gt; tags cannot):</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Perl code can be used in tag attributes also --&gt;\n\n&lt;font color=\"!{! (qw(red blue green))[rand 3] !}\"&gt;\n\nHello World\n\n&lt;/font&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#use-of-the-perl-tag-for-non-inline-code","title":"Use of the &lt;perl&gt; tag for non-inline code.","text":"<p>Any code that is not co-mingled with the HTML of a document is non-inline code. It can be segmented from the content HTML using the __PERL__ delimiter, or by being kept in a completely different package and referenced as an external Perl subroutine call. An example of non-inline code:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Empty perl tag this time, but with method name as attribute --&gt;\n\nHello World &lt;perl method=\"hello\"/&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { return localtime }\n</code></pre> <p>Run</p> <p>Note that the &lt;perl&gt; tag in the above example is explicitly closed and does not contain any content. However non-inline code can enclose HTML or text within the tags:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- The perl method will be called, but \"Hello World\" will not be displayed ! --&gt;\n\n&lt;perl method=\"hello\"&gt;\nHello World \n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { return localtime() }\n</code></pre> <p>Run</p> <p>But this is not very interesting so far - the \"Hello World\" text is not displayed when the example is run !</p> <p>In order for text or HTML within a non-inline perl block to be displayed, it must be \"rendered\" into the output stream by the WebDyne engine. This is done by calling the render() method. Let's try that again:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- The perl method will be called, and this time the \"Hello World\" will be displayed--&gt;\n\n&lt;perl method=\"hello\"&gt;\nHello World \n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my $self=shift();\n    $self-&gt;render();\n\n}\n</code></pre> <p>Run</p> <p>And again, this time showing how to render the text block multiple times. Note that an array reference is returned by the Perl routine - this is fine, and is interpreted as an array of HTML text, which is concatenated and send to the browser.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- The \"Hello World\" text will be rendered multiple times --&gt;\n\n&lt;perl method=\"hello\"&gt;\n&lt;p&gt;\nHello World \n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my $self=shift();\n    my @html;\n    for (0..3) { push @html, $self-&gt;render() };\n    return \\@html;\n}\n</code></pre> <p>Run</p> <p>Same output using the $self-&gt;print() method:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- The \"Hello World\" text will be rendered multiple times --&gt;\n\n&lt;perl method=\"hello\"&gt;\n&lt;p&gt;\nHello World \n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    #  Note use of $self-&gt;print()\n    #\n    my $self=shift();\n    for (0..3) { $self-&gt;print($self-&gt;render()) };\n    return \\undef;\n}\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#alternate-output-methods-from-perl-handlers","title":"Alternate output methods from Perl handlers","text":"<p>When calling a perl handler from a .psp file at some stage you will want your code to deliver output to the browser. Various examples have been given throughout this document, here is a summary of various output options:</p> <pre><code>&lt;start_html&gt;\n&lt;pre&gt;\n&lt;perl handler=\"handler1\" /&gt;\n&lt;perl handler=\"handler2\" /&gt;\n&lt;perl handler=\"handler3\" /&gt;\n&lt;perl handler=\"handler4\" /&gt;\n&lt;perl handler=\"handler5\" /&gt;\n&lt;perl handler=\"handler6\" chomp /&gt;\n&lt;perl handler=\"handler7\" /&gt;\n&lt;perl handler=\"handler8\" /&gt;\n__PERL__\n\n#  Different ways of sending output to the browser\n#\nsub handler1 {\n\n    #  Simplest - just return a scalar variable\n    #\n    my $text='Hello World 1';\n    return $text;\n\n}\n\nsub handler2 {\n\n    #  Scalar ref better because if var is empty (undef) won't trigger and error\n    #\n    my $text='Hello World 2';\n    return \\$text;\n\n}\n\nsub handler3 {\n\n    #  Returning an array ref is OK\n    #\n    my @text=('Hello', 'World', 3);\n\n\n    #  This won't work\n    #\n    #return @text\n\n\n    #  Returning an array ref is OK - note it won't auto insert spaces though !\n    #\n    return \\@text\n\n}\n\nsub handler4 {\n\n    #  Print something also using the print statement\n    #\n    my $text='Hello World 4';\n    print $text;\n    print \"\\n\";\n\n    #  Printing a scalar ref is OK\n    #\n    print \\$text;\n\n}\n\n\nsub handler5 {\n\n    #  Print arrays\n    #\n    my @text=('Hello ', 'World ', 5);\n    print @text;\n\n\n    #  Print new line manually, or turn on autonewline -\n    #  see next example;\n    #\n    print \"\\n\";\n\n    #  Array refs are OK\n    #\n    print \\@text;\n\n\n    #  Printing hash ref's won't work ! This will fail\n    #\n    # print { a=&gt;1, b=&gt;2 }\n    return \\undef;\n\n}\n\nsub handler6 {\n\n    #  You can print using a webdyne method handler\n    #\n    my $self=shift();\n\n\n    #  Text we want to print\n    #\n    my $text=\"Hello World 6\\n\";\n    my @text=('Hello ', 'World ', 6, \"\\n\");\n\n\n    #  These all work\n    #\n    $self-&gt;print($text);\n    $self-&gt;print(\\$text);\n    $self-&gt;print(@text);\n    $self-&gt;print(\\@text);\n    return \\undef;\n\n}\n\nsub handler7 {\n\n    #  You can print using a webdyne method handler\n    #\n    my $self=shift();\n\n\n    #  Text we want to print\n    #\n    my $text=\"Hello World 7\";\n    my @text=('Hello ', 'World ', 7);\n\n\n    #  Turn on autonew line to print \"\\n\" at end of every call\n    #\n    $self-&gt;autonewline(1);\n\n\n    #  These work\n    #\n    $self-&gt;print($text);\n    $self-&gt;print(\\$text);\n\n\n    #  These put a CR between every element in the array\n    $self-&gt;print(@text);\n    $self-&gt;print(\\@text);\n\n\n    #  Turn off autonewline and return\n    #\n    $self-&gt;autonewline(0);\n    return \\undef;\n\n}\n\nsub handler8 {\n\n    #  The say() method is supported also\n    #\n    use feature 'say';\n    my $self=shift();\n    my $text='Hello World 8';\n\n\n    #  These will print, but won't send newline - say() won't send \\n to TIEHANDLE\n    #\n    say($text);\n    say($text);\n    $self-&gt;print(\"\\n\");\n\n\n    #  Use this instead\n    #\n    $self-&gt;say($text, $text);\n}\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#passing-parameters-to-subroutines","title":"Passing parameters to subroutines","text":"<p>The behaviour of a called __PERL__ subroutine can be modified by passing parameters which it can act on:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- The \"Hello World\" text will be rendered with the param name --&gt;\n\n&lt;perl method=\"hello\" param=\"Alice\"/&gt;\n&lt;p&gt;\n&lt;perl method=\"hello\" param=\"Bob\"/&gt;\n&lt;p&gt;\n\n&lt;!-- We can pass an array or hashref also - see variables section for more info on this syntax --&gt;\n\n&lt;perl method=\"hello_again\" param=\"%{ firstname=&gt;'Alice', lastname=&gt;'Smith' }\"/&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my ($self, $param)=@_;\n    return \\\"Hello world $param\"\n}\n\nsub hello_again {\n\n    my ($self, $param_hr)=@_;\n    my $firstname=$param_hr-&gt;{'firstname'};\n    my $lastname =$param_hr-&gt;{'lastname'};\n    return \\\"Hello world $firstname $lastname\";\n\n}\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#parameter-inheritance","title":"Parameter inheritance","text":"<p>In-line code can inherit parameters passed from a perl handler/method. In-line code gets two parameters supplied - the first (<code>$_[0)</code>) is the self reference (e.g. <code>$self</code>), the second (<code>$_[1]</code>) is any inherited parameters as a hash reference. This can be useful for quick \"in-line\" formatting, e.g:</p> <pre><code>&lt;start_html&gt;\n&lt;perl method=\"inherit\"&gt;\n&lt;pre&gt;\nTime - Unix epoch format: ${time}\nTime - local time format: &lt;? strftime('%X', localtime($_[1]-&gt;{'time'})) ?&gt;\nDate - ISO format: &lt;? strftime('%Y-%m-%d', localtime($_[1]-&gt;{'time'})) ?&gt;\nDate - US format: &lt;? strftime('%m/%d/%Y', localtime($_[1]-&gt;{'time'})) ?&gt;\nDate - UK format: &lt;? strftime('%d/%m/%Y', localtime($_[1]-&gt;{'time'})) ?&gt;\n&lt;/pre&gt;\n&lt;/perl&gt;\n__PERL__\nuse POSIX qw(strftime);\nsub inherit {\n    shift()-&gt;render( time=&gt;time() )\n}\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#notes-about-__perl__-sections","title":"Notes about __PERL__ sections","text":"<p>Code in __PERL__ sections has some particular properties. __PERL__ code is only executed once. Subroutines defined in a __PERL__ section can be called as many times as you want, but the code outside of subroutines is only executed the first time a page is loaded. No matter how many times it is run, in the following code <code>$i</code> will always be 1:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;perl method=\"hello\"/&gt;\n&lt;p&gt;\n&lt;perl method=\"hello\"/&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nmy $i=0;\n$i++;\n\nmy $x=0;\n\nsub hello {\n\n    #  Note x may not increment as you expect because you will probably\n    #  get a different Apache process each time you load this page\n    #\n    return sprintf(\"value of i: $i, value of x in PID $$: %s\", $x++)\n}\n</code></pre> <p>Run</p> <p>Lexical variables are not accessible outside of the __PERL__ section due to the way perl's eval() function works. The following example will fail:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\nThe value of $i is !{! \\$i !}\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nmy $i=5;\n</code></pre> <p>Run</p> <p>Package defined vars declared in a __PERL__ section do work, with caveats:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Does not work --&gt;\nThe value of $i is !{! $::i !}\n&lt;p&gt;\n\n&lt;!-- Ugly hack, does work though --&gt;\nThe value of $i is !{! ${__PACKAGE__.::i} !}\n&lt;p&gt;\n\n&lt;!-- Probably best to just do this though --&gt;\nThe value of $i is !{! &amp;get_i() !}\n&lt;p&gt;\n\n&lt;!-- Or this - see variable substitution section  --&gt;\n&lt;perl method=\"render_i\"&gt;\nThe value of $i is ${i}\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nour $i=5;\n\nsub get_i { \\$i }\n\nsub render_i { shift()-&gt;render(i=&gt;$i) }\n</code></pre> <p>Run</p> <p>See the Variables/Substitution section for clean ways to insert variable contents into the page.</p>"},{"location":"02_basic_usage_examples/#variables","title":"Variables","text":"<p>WebDyne starts to get more useful when variables are used to modify the content of a rendered text block. A simple example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- The var ${time} will be substituted for the correspondingly named render parameter --&gt;\n\n&lt;perl method=\"hello\"&gt;\nHello World ${time}\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { \n    my $self=shift();\n    my $time=localtime();\n    $self-&gt;render( time=&gt;$time );\n}\n</code></pre> <p>Run</p> <p>Note the passing of the <code>time</code> value as a parameter to be substituted when the text is rendered.</p> <p>Combine this with multiple call to the render() routine to display dynamic data:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Multiple variables can be supplied at once as render parameters --&gt;\n\n&lt;perl method=\"hello0\"&gt;\n&lt;p&gt;\nHello World ${time}, loop iteration ${i}.\n&lt;/perl&gt;\n\n&lt;br&gt;\n&lt;br&gt;\n\n&lt;perl method=\"hello1\"&gt;\n&lt;p&gt;\nHello World ${time}, loop iteration ${i}.\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello0 {\n\n    my $self=shift();\n    my @html;\n    my $time=localtime();\n    for (my $i=0; $i&lt;3; $i++) { \n        push @html, $self-&gt;render( time=&gt;$time, i=&gt;$i) \n    };\n    return \\@html;\n}\n\nsub hello1 {\n\n    #  Alternate syntax using print\n    #\n    my $self=shift();\n    my $time=localtime();\n    for (my $i=0; $i&lt;3; $i++) { \n        print $self-&gt;render( time=&gt;$time, i=&gt;$i)\n    };\n    return \\undef\n}\n</code></pre> <p>Run</p> <p>Variables can also be used to modify tag attributes:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Render paramaters also work in tag attributes --&gt;\n\n&lt;perl method=\"hello\"&gt;\n&lt;p&gt;\n&lt;font color=\"${color}\"&gt;\nHello World\n&lt;/font&gt;\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my $self=shift();\n    my @html;\n    for (0..3) {\n        my $color=(qw(red green yellow blue orange))[rand 5];\n        push @html, $self-&gt;render( color=&gt;$color );\n    }\n    \\@html;\n\n}\n</code></pre> <p>Run</p> <p>Other variable types are available also, including:</p> <ul> <li> <p><code>@{var,var,..}</code> for arrays, e.g. <code>@{'foo', 'bar'}</code></p> </li> <li> <p><code>%{key=&gt;value, key=&gt;value, ..}</code> for hashes e.g.<code>%{ a=&gt;1, b=&gt;2 }</code></p> </li> <li> <p><code>+{varname}</code> for CGI form parameters, e.g. <code>+{firstname}</code></p> </li> <li> <p><code>*{varname}</code>for environment variables, e.g. <code>*{HTTP_USER_AGENT}</code></p> </li> <li> <p><code>^{requestmethod}</code> for Apache request (<code>$r=Apache-&gt;request</code>) object     methods, e.g. <code>^{protocol}</code>. Only available for in Apache/mod_perl,     and only useful for request methods that return a scalar value.</p> </li> </ul> <p>The following template uses techniques and tags discussed later, but should provide an example of potential variable usage:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Variables&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Environment variables --&gt;\n\n&lt;p&gt;\n&lt;!-- Short Way --&gt;\nMod Perl Version: *{MOD_PERL}\n&lt;br&gt;\n&lt;!-- Same as Perl code --&gt;\nMod Perl Version: \n&lt;perl&gt; \\$ENV{'MOD_PERL'} &lt;/perl&gt;\n\n\n&lt;!-- Apache request record methods. Only methods that return a scalar result are usable --&gt;\n\n&lt;p&gt;\n&lt;!-- Short Way --&gt;\nRequest Protocol: ^{protocol}\n&lt;br&gt;\n&lt;!-- Same as Perl code --&gt;\nRequest Protocol: \n&lt;perl&gt; my $self=shift(); my $r=$self-&gt;r(); \\$r-&gt;protocol() &lt;/perl&gt;\n\n\n&lt;!-- CGI params --&gt;\n\n&lt;form&gt;\nYour Name:\n&lt;p&gt;&lt;textfield name=\"name\" default=\"Test\" size=\"12\"&gt;\n&lt;p&gt;&lt;submit name=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n&lt;!-- Short Way --&gt;\nYou Entered: +{name}\n&lt;br&gt;\n&lt;!-- Same as Perl code --&gt;\nYou Entered: \n&lt;perl&gt; my $self=shift(); my $cgi_or=$self-&gt;CGI(); \\$cgi_or-&gt;param('name') &lt;/perl&gt;\n&lt;br&gt;\n&lt;!-- CGI vars are also loaded into the %_ global var, so the above is the same as --&gt;\nYou Entered: \n&lt;perl&gt; $_{'name'} &lt;/perl&gt;\n\n\n&lt;!-- Arrays --&gt;\n\n&lt;form&gt;\n&lt;p&gt;\nFavourite colour 1:\n&lt;p&gt;&lt;popup_menu name=\"popup_menu\" values=\"@{qw(red green blue)}\"&gt;\n\n\n&lt;!-- Hashes --&gt;\n\n&lt;p&gt;\nFavourite colour 2:\n&lt;p&gt;&lt;popup_menu name=\"popup_menu\" \n    values=\"%{red=&gt;Red, green=&gt;Green, blue=&gt;Blue}\"&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p>"},{"location":"02_basic_usage_examples/#shortcut-tags","title":"Shortcut Tags","text":"<p>Previous versions of WebDyne used Lincoln Stein's CGI.pm module to render tags, and supported CGI.pm shortcut tags such as &lt;start_html&gt;, &lt;popup_menu&gt; etc. Modern versions of WebDyne do not use CGI.pm in any modules, having ported tag generation to HTML::Tiny. Support for shortcut tags is preserved though - they provide a quick and easy way to generate simple web pages.</p>"},{"location":"02_basic_usage_examples/#quick-pages-using-shortcut-start_html-end_html-tags","title":"Quick pages using shortcut &lt;start_html&gt;, &lt;end_html&gt; tags","text":"<p>For rapid development you can take advantage of the &lt;start_html&gt; and &lt;end_html&gt; tags. The following page generates compliant HTML (view the page source after loading it to see for yourself):</p> <pre><code>&lt;start_html title=\"Quick Page\"&gt;\nThe time is: !{! localtime() !}\n&lt;end_html&gt;\n</code></pre> <p>Run</p> <p>The &lt;start_html&gt; tag generates all the &lt;html&gt;, &lt;head&gt;, &lt;title&gt; tags etc needed for a valid HTML page plus an opening body tag. Just enter the body content, then optionally finish with &lt;end_html&gt; to generate the closing &lt;body&gt; and &lt;html&gt; tags (optional because the page is automatically closed if these are omitted). See the tag reference section but here is an example using several of the properties available in the &lt;start_html&gt; tag including loading multiple scripts and stylesheets:</p> <pre><code>&lt;start_html title=\"Hello World\" \n    style=\"@{qw(https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css https://fonts.googleapis.com/css2?family=Inter:wght@400;600&amp;family=Playfair+Display:wght@700&amp;display=swap)}\"\n    script=\"@{qw(https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js https://cdn.jsdelivr.net/npm/typed.js@2.1.0/dist/typed.umd.js)}\"\n&gt;\n&lt;p&gt;\n&lt;h2 id=\"typed\"&gt;&lt;/h2&gt;\n&lt;div data-aos=\"fade-up\"&gt;I animate on load and scroll !&lt;/div&gt;\n\n&lt;script&gt;\n  AOS.init({\n    duration: 1000,  // 1s animations\n    once: true       // animate only once\n  });\n&lt;/script&gt;\n\n&lt;script&gt;\n  new Typed('#typed', {\n    strings: [\"Lorem\", \"Ipsum\", \"!{! localtime !}\"],\n    typeSpeed: 50,\n    backSpeed: 25,\n    loop: true\n  });\n&lt;/script&gt;\n</code></pre> <p>Run</p> <p>Caution</p> <p>If make sure any attributes using the <code>@{..}</code> or <code>%{..}</code> convention are on one line - the parser will not interpret them correctly if spanning multiple lines.</p> <p>If using the &lt;start_html&gt; shortcut tag you can optionally insert default stylesheets and/or &lt;head&gt; sections from the Webdyne configuration file. E.g if in your <code>webdyne.conf.pl</code> file you have the following:</p> <pre><code>$_={\n    'WebDyne::Constant' =&gt; {\n\n        #  Inserted as &lt;meta&gt; into &lt;head&gt; section\n        #\n        WEBDYNE_META =&gt; {\n            #  These all rendered as &lt;meta name=\"$key\" content=\"$value\"&gt;\n            viewport =&gt; 'width=device-width, initial-scale=1.0',\n            author =&gt; 'Bob Foobar',\n            #  This one rendered as &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n            'http-equiv=X-UA-Compatible' =&gt; 'IE=edge',\n            'http-equiv=refresh' =&gt; '5; url=https://www.example.com'\n        }\n\n        #  This is inserted inside the &lt;html&gt; starting tag, works for &lt;start_html&gt; or straight &lt;html&gt;\n        #\n        WEBDYNE_HTML_PARAM =&gt; {\n            lang =&gt; 'de'\n        }\n\n        #  This is inserted before the &lt;/head&gt; closing tag, works for &lt;start_html&gt; or straight &lt;html&gt;\n        #\n        WEBDYNE_HEAD_INSERT =&gt; &lt;&lt; 'END'\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.classless.min.css\"&gt;\n&lt;style&gt;\n:root { --pico-font-size: 85% } \nbody { padding-top: 10px; padding-left: 10px;\n&lt;/style&gt;\nEND\n\n    }\n}\n</code></pre> <p>Then any <code>.psp</code> file with a &lt;start_html&gt; tag will have the following content:</p> <pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=\"de\"&gt;\n&lt;head&gt;\n&lt;title&gt;Untitled Document&lt;/title&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;meta name=\"author\" content=\"Bob Foobar\"&gt;\n&lt;meta http-equiv=\"refresh\" content=\"5; url=https://www.example.com\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.classless.min.css\"&gt;\n&lt;style&gt;\n    :root { --pico-font-size: 85% } \n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"02_basic_usage_examples/#html-forms-using-popup_menucheckbox_group-and-other-tags","title":"HTML Forms using &lt;popup_menu&gt;,&lt;checkbox_group&gt; and other tags","text":"<p>The CGI.pm module presented several shortcut tags for generating HTML forms. These tags have been recreated in WebDyne and act in a similar way.</p> <p>The manual page for CGI.pm contains the following synopsis example:</p> <pre><code>use CGI qw/:standard/;\n   print header,\n         start_html('A Simple Example'),\n         h1('A Simple Example'),\n         start_form,\n         \"What's your name? \",textfield('name'),p,\n         \"What's the combination?\", p,\n         checkbox_group(-name=&gt;'words',\n                        -values=&gt;['eenie','meenie','minie','moe'],\n                        -defaults=&gt;['eenie','minie']), p,\n         \"What's your favorite color? \",\n         popup_menu(-name=&gt;'color',\n                    -values=&gt;['red','green','blue','chartreuse']),p,\n         submit,\n         end_form,\n         hr;\n\n    if (param()) {\n        print \"Your name is\",em(param('name')),p,\n              \"The keywords are: \",em(join(\", \",param('words'))),p,\n</code></pre> <p>If the example was ported to a WebDyne compatible page it might look something like this:</p> <pre><code>&lt;!-- The same form from the CGI example --&gt;\n\n&lt;start_html title=\"A simple example\"&gt;\n&lt;h1&gt;A Simple Example&lt;/h1&gt;\n&lt;start_form&gt;\n&lt;p&gt;\nWhat's your name ?\n&lt;p&gt;&lt;textfield name=\"name\"&gt;\n&lt;p&gt;\nWhat's the combination ? \n&lt;p&gt;&lt;checkbox_group \n    name=\"words\" values=\"@{qw(eenie meenie minie moe)}\" defaults=\"@{qw(eenie minie)}\"&gt;\n&lt;p&gt;\nWhat's your favourite color ? \n&lt;p&gt;&lt;popup_menu name=\"color\" values=\"@{qw(red green blue chartreuse)}\"&gt;\n&lt;p&gt;&lt;submit&gt;\n&lt;end_form&gt;\n&lt;hr&gt;\n\n\n&lt;!-- This section only rendered when form submitted --&gt;\n\n&lt;perl method=\"answers\"&gt;\n&lt;p&gt;\nYour name is: &lt;em&gt;+{name}&lt;/em&gt;\n&lt;p&gt;\nThe keywords are: &lt;em&gt;${words}&lt;/em&gt;\n&lt;p&gt;\nYour favorite color is: &lt;em&gt;+{color}&lt;/em&gt;\n&lt;/perl&gt;\n\n__PERL__\n\nsub answers {\n\n    my $self=shift();\n    my $cgi_or=$self-&gt;CGI();\n    if ($cgi_or-&gt;param()) {\n        my $words=join(\",\", $cgi_or-&gt;param('words'));\n        return $self-&gt;render( words=&gt;$words )\n    }\n    else {\n        return \\undef;\n    }\n\n}\n</code></pre> <p>Run</p> <p>Note</p> <p>When using the WebDyne form tags, state (previous form values) are preserved after the Submit button is presented. This makes building single page application simple as there is no need to implement logic to adjust options in a traditional HTML form to reflect the user's choice.</p>"},{"location":"02_basic_usage_examples/#more-on-html-shortcut-tags-in-forms","title":"More on HTML shortcut tags in forms","text":"<p>Tags such as &lt;popup_menu&gt; output traditional HTML form tags such as &lt;select&gt;&lt;option&gt;...&lt;/select&gt;, but they have the advantage of allowing Perl data types as attributes. Take the following example:</p> <pre><code>&lt;popup_menu value=\"%{red=&gt;Red, green=&gt;Green, blue=&gt;Blue}\"/&gt;\n</code></pre> <p>it is arguably easier to read than:</p> <pre><code>&lt;select name=\"values\" tabindex=\"1\"&gt;\n&lt;option value=\"green\"&gt;Green&lt;/option&gt;\n&lt;option value=\"blue\"&gt;Blue&lt;/option&gt;\n&lt;option value=\"red\"&gt;Red&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>So there is some readability benefit, however the real advantage shows when we consider the next example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Generate all country names for picklist --&gt;\n\n&lt;form&gt;\n\nYour Country ?\n&lt;perl method=\"countries\"&gt;\n&lt;popup_menu values=\"${countries_ar}\" default=\"Australia\"&gt;\n&lt;/perl&gt;\n\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nuse Locale::Country;\n\nsub countries {\n\n    my $self=shift();\n    my @countries = sort { $a cmp $b } all_country_names();\n    $self-&gt;render( countries_ar=&gt;\\@countries );\n\n}\n</code></pre> <p>Run</p> <p>All values for the menu item were pre-populated from one WebDyne variable - which saves a significant amount of time populating a \"countries\" style drop-down box.</p>"},{"location":"02_basic_usage_examples/#access-to-html-form-responses-and-query-strings","title":"Access to HTML form responses and query strings","text":"<p>Once a form is submitted you will want to act on responses. There are several ways to do this - you can access a CGI::Simple object instance in any WebDyne template by calling the CGI() method to obtain form responses:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Note use of CGI.pm derived textfield tag --&gt;\n\n&lt;form&gt;\nEnter your name: \n&lt;p&gt;&lt;textfield name=\"name\"&gt;\n&lt;p&gt;&lt;submit&gt;\n&lt;/form&gt;\n\n\n&lt;!-- And print out name if we have it --&gt;\n\n&lt;perl method=\"hello\"&gt;\nHello ${name}, pleased to meet you.\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { \n    my $self=shift();\n\n    #  Get CGI instance\n    #\n    my $cgi_or=$self-&gt;CGI();\n\n    #  Use CGI.pm param() method. Could also use other\n    #  methods like keywords(), Vars() etc.\n    #\n    my $name=$cgi_or-&gt;param('name');\n\n    $self-&gt;render( name=&gt;$name);\n}\n</code></pre> <p>Run</p> <p>From there you can all any method supported by the CGI::Simple module - see the CGI::Simple manual page (<code>man CGI::Simple</code>) or review on CPAN: CGI::Simple</p> <p>Since one of the most common code tasks is to access query parameters, WebDyne stores them in the special <code>%_</code> global variable before any user defined Perl methods are called. For example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;form&gt;\nEnter your name:\n&lt;p&gt;&lt;textfield name=\"name\"&gt;\n&lt;p&gt;&lt;submit&gt;\n&lt;/form&gt;\n\n&lt;!-- Use the %_ global var, other options below --&gt;\n&lt;p&gt;\nHello &lt;? uc($_{'name'} || 'Anonymous') ?&gt;, pleased to meet you.\n\n\n&lt;!-- Quick and dirty, no perl code at all --&gt;\n\n&lt;p&gt;\nHello +{name}, pleased to meet you.\n\n\n&lt;!-- Traditional, using the CGI::Simple param() call in the hello1 sub --&gt;\n\n&lt;p&gt;\n&lt;perl method=\"hello1\"&gt;\nHello ${name}, pleased to meet you.\n&lt;/perl&gt;\n\n\n&lt;!-- Quicker method using %_ global var in the hello2 sub --&gt;\n\n&lt;p&gt;\n&lt;perl method=\"hello2\"&gt;\nHello ${name}, pleased to meet you.\n&lt;/perl&gt;\n\n\n&lt;!-- Quick and dirty using inline Perl. Note use of \\ to prevent error if param empty --&gt;\n\n&lt;p&gt;\nHello !{! \\$_{name} !}, pleased to meet you.\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n__PERL__\n\nsub hello1 { \n    my $self=shift();\n    my $cgi_or=$self-&gt;CGI();\n    my $name=$cgi_or-&gt;param('name');\n    $self-&gt;render( name=&gt;$name);\n}\n\nsub hello2 { \n\n    my $self=shift();\n\n    #  Quicker method of getting name param\n    #\n    my $name=$_{'name'};\n    $self-&gt;render( name=&gt;$name);\n}\n</code></pre> <p>Run</p>"},{"location":"03_advanced_usage/","title":"Advanced Usage","text":"<p>A lot of tasks can be achieved just using the basic features detailed above. However there are more advanced features that can make life even easier</p>"},{"location":"03_advanced_usage/#blocks","title":"Blocks","text":"<p>Blocks are a powerful dynamic content generation tool. WebDyne can render arbitrary blocks of text or HTML within a page, which makes generation of dynamic content generally more readable than similar output generated within Perl code. An example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Blocks&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;form&gt;\n2 + 2 = &lt;textfield name=\"sum\"&gt;\n&lt;p&gt;&lt;submit&gt;\n&lt;/form&gt;\n\n&lt;p&gt;\n&lt;perl method=\"check\"&gt;\n\n\n&lt;!-- Each block below is only rendered if specifically requested by the Perl code --&gt;\n\n&lt;block name=\"pass\"&gt;\nYes, +{sum} is the correct answer ! Brilliant ..\n&lt;/block&gt;\n\n&lt;block name=\"fail\"&gt;\nI am sorry .. +{sum} is not correct .. Please try again !\n&lt;/block&gt;\n\n&lt;block name=\"silly\"&gt;\nDanger, does not compute ! .. \"+{sum}\" is not a number !\n&lt;/block&gt;\n\n&lt;p&gt;\nThanks for playing !\n\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub check {\n\n    my $self=shift();\n\n    if ((my $ans=$_{'sum'}) == 4) {\n        $self-&gt;render_block('pass')\n    }\n    elsif ($ans=~/^[0-9.]+$/) {\n        $self-&gt;render_block('fail')\n    }\n    elsif ($ans) {\n        $self-&gt;render_block('silly')\n    }\n\n    #  Blocks aren't displayed until whole section rendered\n    #\n    return $self-&gt;render();\n\n}\n</code></pre> <p>Run</p> <p>There can be more than one block with the same name - any block with the target name will be rendered:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;form&gt;\nEnter your name:\n&lt;p&gt;&lt;textfield name=\"name\"&gt;\n&lt;p&gt;&lt;submit&gt;\n&lt;/form&gt;\n\n&lt;perl method=\"hello\"&gt;\n\n\n&lt;!-- The following block is only rendered if we get a name - see the perl \n    code --&gt;\n\n&lt;block name=\"greeting\"&gt;\nHello +{name}, pleased to meet you !\n&lt;p&gt;\n&lt;/block&gt;\n\n\n&lt;!-- This text is always rendered - it is not part of a block --&gt;\n\nThe time here is !{! localtime() !}\n\n\n&lt;!-- This block has the same name as the first one, so will be rendered\n    whenever that one is --&gt;\n\n&lt;block name=\"greeting\"&gt;\n&lt;p&gt;\nIt has been a pleasure to serve you, +{name} !\n&lt;/block&gt;\n\n\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { \n\n    my $self=shift();\n\n    #  Only render greeting blocks if name given. Both blocks\n    #  will be rendered, as the both have the name \"greeting\"\n    #\n    if ($_{'name'}) {\n        $self-&gt;render_block('greeting');\n    }\n\n    $self-&gt;render();\n}\n</code></pre> <p>Run</p> <p>Like any other text or HTML between &lt;perl&gt; tags, blocks can take parameters to substitute into the text:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;form&gt;\nEnter your name: &lt;textfield name=\"name\"&gt;\n&amp;nbsp;\n&lt;submit&gt;\n&lt;/form&gt;\n\n&lt;perl method=\"hello\"&gt;\n\n\n&lt;!-- This block will be rendered multiple times, the output changing depending\n    on the variables values supplied as parameters --&gt;\n\n&lt;block name=\"greeting\"&gt;\n${i} .. Hello +{name}, pleased to meet you !\n&lt;p&gt;\n&lt;/block&gt;\n\nThe time here is &lt;? localtime() ?&gt;\n\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello { \n\n    my $self=shift();\n\n    #  Only render greeting blocks if name given. Both blocks\n    #  will be rendered, as the both have the name \"greeting\"\n    #\n    if ($_{'name'}) {\n        for(my $i=0; $i&lt;3; $i++) {\n            $self-&gt;render_block('greeting', i=&gt;$i );\n        }\n    }\n\n    $self-&gt;render();\n}\n</code></pre> <p>Run</p> <p>Blocks have a non-intuitive feature - they still display even if they are outside of the &lt;perl&gt; tags that made the call to render them. e.g. the following is OK:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;!-- Perl block with no content --&gt;\n&lt;perl method=\"hello\"&gt;\n&lt;/perl&gt;\n\n&lt;p&gt;\n\n&lt;!-- This block is not enclosed within the &lt;perl&gt; tags, but will still render --&gt;\n&lt;block name=\"hello\"&gt;\nHello World\n&lt;/block&gt;\n\n&lt;p&gt;\n\n&lt;!-- So will this one --&gt;\n&lt;block name=\"hello\"&gt;\nAgain\n&lt;/block&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my $self=shift();\n    $self-&gt;render_block('hello');\n\n}\n</code></pre> <p>Run</p> <p>You can mix the two styles:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n\n&lt;body&gt;\n&lt;perl method=\"hello\"&gt;\n\n&lt;!-- This block is rendered --&gt;\n&lt;block name=\"hello\"&gt;\nHello World\n&lt;/block&gt;\n\n&lt;/perl&gt;\n\n&lt;p&gt;\n&lt;!-- So is this one, even though it is outside the &lt;perl&gt;..&lt;/perl&gt; block --&gt;\n&lt;block name=\"hello\"&gt;\nAgain\n&lt;/block&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub hello {\n\n    my $self=shift();\n    $self-&gt;render_block('hello');\n    $self-&gt;render();\n\n}\n</code></pre> <p>Run</p> <p>You can use the &lt;block&gt; tag display attribute to hide or show a block, or use a CGI parameter to determine visibility (e.g for a status update or warning):</p> <pre><code>&lt;start_html&gt;\n\n&lt;!-- Form to get block toggle status. Update hidden param based on toggle button --&gt;\n&lt;form&gt;\n&lt;submit name=\"button\" value=\"Toggle\"&gt;\n&lt;hidden name=\"toggle\" value=\"!{! $_{'toggle'} ? 0 : 1 !}\"&gt;\n&lt;/form&gt;\n\n&lt;!-- This block will only be displayed if the toggle value is true --&gt;\n&lt;block name=\"toggle1\" display=\"!{! $_{'toggle'} !}\"&gt;\nToggle On (+{toggle})\n&lt;/block&gt;\n&lt;p&gt;\n\n&lt;!-- This block will always display --&gt;\n&lt;block name=\"hello\" display=1&gt;\nHello World\n&lt;/block&gt;\n\n&lt;!-- This block will never display unless called from a perl handler --&gt;\n&lt;block name=\"hello\" display=0&gt;\nGoodbye world\n&lt;/block&gt;\n</code></pre> <p>Run</p>"},{"location":"03_advanced_usage/#file-inclusion","title":"File inclusion","text":"<p>You can include other file fragments at compile time using the include tag:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nThe protocols file on this machine:\n&lt;pre&gt;\n&lt;include file=\"/etc/protocols\"&gt;\n&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run</p> <p>If the file name is not an absolute path name is will be loaded relative to the directory of the parent file. For example if file \"bar.psp\" incorporates the tag &lt;include file=\"foo.psp\"&gt; it will be expected that \"<code>foo.psp</code>\" is in the same directory as \"<code>bar.psp</code>\".</p> <p>Important</p> <p>The include tag pulls in the target file at compile time. Changes to the included file after the WebDyne page is run the first time (resulting in compilation) are not reflected in subsequent output unless the <code>nocache</code> attribute is set. Thus the include tag should not be seen as a shortcut to a pseudo Content Management System. For example &lt;include file=\"latest_news.txt\"&gt; will probably not behave in the way you expect. The first time you run it the latest news is displayed. However updating the \"latest_news.txt\" file will not result in changes to the output (it will be stale).</p> <p>If you do use the <code>nocache</code> attribute the included page will be loaded and parsed every time, significantly slowing down page display. There are betters ways to build a CMS with WebDyne - use the include tag sparingly !</p> <p>You can include just the head or body section of a HTML or PSP file by using the head or body attributes. Here is the reference file (file to be included). It does not have to be a .psp file - a standard HTML file can be supplied :</p> <pre><code>&lt;start_html title=\"Include Head Title\"&gt;\nInclude Body\n</code></pre> <p>Run</p> <p>And here is the generating file (the file that includes sections from the reference file).</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;include head file=\"./include2.psp\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;include body file=\"./include2.psp\"&gt;\n</code></pre> <p>Run</p> <p>You can also include block sections from <code>.psp</code> files. If this is the reference file (the file to be included) containing two blocks. This is a renderable <code>.psp</code> file in it's own right. The blocks use the <code>display</code> attribute to demonstrate that they will produce output, but it's not required:</p> <pre><code>&lt;start_html&gt;\n&lt;p&gt;\n&lt;block name=\"block1\" display&gt;\nThis is block 1\n&lt;/block&gt;\n\n&lt;p&gt;\n&lt;block name=\"block2\" display&gt;\nThis is block 2\n&lt;/block&gt;\n</code></pre> <p>Run</p> <p>And here is the file that brings in the blocks from the reference file and incorporates them into the output:</p> <pre><code>&lt;start_html&gt;\nThis is my master file\n&lt;p&gt;\nHere is some text pulled from the \"include4.psp\" file:\n&lt;p&gt;\n&lt;include file=\"include4.psp\" block=\"block1\"&gt;\n&lt;p&gt;\nAnd another different block from the same file with caching disabled:\n&lt;p&gt;\n&lt;include file=\"include4.psp\" block=\"block2\" nocache&gt;\n</code></pre> <p>Run</p>"},{"location":"03_advanced_usage/#static_sections","title":"Static Sections","text":"<p>Sometimes you want to generate dynamic output in a page once only (e.g. a last modified date, a sidebar menu etc.) Using WebDyne this can be done with Perl or CGI code flagged with the \"static\" attribute. Any dynamic tag so flagged will be rendered at compile time, and the resulting output will become part of the compiled page - it will not change on subsequent page views, or have to be re-run each time the page is loaded. An example:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nHello World\n&lt;hr&gt;\n\n\n&lt;!-- Note the static attribute --&gt;\n\n&lt;perl method=\"mtime\" static=\"1\"&gt;\n&lt;em&gt;Last Modified: &lt;/em&gt;${mtime}\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub mtime {\n\n    my $self=shift();\n    my $r=$self-&gt;request();\n\n    my $srce_pn=$r-&gt;filename();\n        my $srce_mtime=(stat($srce_pn))[9];\n    my $srce_localmtime=localtime $srce_mtime;\n\n        return $self-&gt;render( mtime=&gt;$srce_localmtime )\n\n}\n</code></pre> <p>Run</p> <p>In fact the above page will render very quickly because it has no dynamic content at all once the &lt;perl&gt; content is flagged as static. The WebDyne engine will recognise this and store the page as a static HTML file in its cache. Whenever it is called WebDyne will use the Apache lookup_file() function to return the page as if it was just serving up static content.</p> <p>You can check this by looking at the content of the WebDyne cache directory (usually /var/webdyne/cache). Any file with a \".html\" extension represents the static version of a page.</p> <p>Of course you can still mix static and dynamic Perl sections:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nHello World\n&lt;p&gt;\n\n&lt;!-- A normal dynamic section - code is run each time page is loaded --&gt;\n\n&lt;perl method=\"localtime\"&gt;\nCurrent time: ${time} \n&lt;/perl&gt;\n&lt;hr&gt;\n\n&lt;!-- Note the static attribute - code is run only once at compile time --&gt;\n\n&lt;perl method=\"mtime\" static=\"1\"&gt;\n&lt;em&gt;Last Modified: &lt;/em&gt;${mtime}\n&lt;/perl&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\n\nsub localtime {\n\n    shift()-&gt;render(time=&gt;scalar localtime);\n\n}\n\n\nsub mtime {\n\n    my $self=shift();\n    my $r=$self-&gt;request();\n\n    my $srce_pn=$r-&gt;filename();\n        my $srce_mtime=(stat($srce_pn))[9];\n    my $srce_localmtime=localtime $srce_mtime;\n\n        return $self-&gt;render( mtime=&gt;$srce_localmtime )\n\n}\n</code></pre> <p>Run</p> <p>If you want the whole pages to be static, then flagging everything with the \"static\" attribute can be cumbersome. There is a special meta tag which flags the entire page as static:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;!-- Special meta tag --&gt;\n&lt;meta name=\"WebDyne\" content=\"static=1\"&gt;\n\n&lt;title&gt;Hello World&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nHello World\n&lt;hr&gt;\n\n\n&lt;!-- A normal dynamic section, but because of the meta tag it will be frozen \n    at compile time --&gt;\n\n&lt;perl method=\"localtime\"&gt;\nCurrent time: ${time} \n&lt;/perl&gt;\n\n&lt;!-- Note the static attribute. It is redundant now the whole page is flagged\n    as static - it could be removed safely. --&gt;\n\n&lt;p&gt;\n&lt;perl method=\"mtime\" static=\"1\"&gt;\n&lt;em&gt;Last Modified: &lt;/em&gt;${mtime}\n&lt;/perl&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\n\nsub localtime {\n\n    shift()-&gt;render(time=&gt;scalar localtime);\n\n}\n\n\nsub mtime {\n\n    my $self=shift();\n    my $r=$self-&gt;request();\n\n    my $srce_pn=$r-&gt;filename();\n        my $srce_mtime=(stat($srce_pn))[9];\n    my $srce_localmtime=localtime $srce_mtime;\n\n        return $self-&gt;render( mtime=&gt;$srce_localmtime )\n\n}\n</code></pre> <p>Run</p> <p>If you don't like the idea of setting the static flag in meta data, then \"using\" the special package \"WebDyne::Static\" will have exactly the same effect:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello World&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nHello World\n&lt;hr&gt;\n\n&lt;perl method=\"localtime\"&gt;\nCurrent time: ${time} \n&lt;/perl&gt;\n\n&lt;p&gt;\n\n&lt;perl method=\"mtime\"&gt;\n&lt;em&gt;Last Modified: &lt;/em&gt;${mtime}\n&lt;/perl&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\n\n#  Makes the whole page static\n#\nuse WebDyne::Static;\n\n\nsub localtime {\n\n    shift()-&gt;render(time=&gt;scalar localtime);\n\n}\n\n\nsub mtime {\n\n    my $self=shift();\n    my $r=$self-&gt;request();\n\n    my $srce_pn=$r-&gt;filename();\n        my $srce_mtime=(stat($srce_pn))[9];\n    my $srce_localmtime=localtime $srce_mtime;\n\n        return $self-&gt;render( mtime=&gt;$srce_localmtime )\n\n}\n</code></pre> <p>Run</p> <p>If the static tag seems trivial consider the example that displayed country codes:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Generate all country names for picklist --&gt;\n\n&lt;form&gt;\n\nYour Country ?\n&lt;perl method=\"countries\"&gt;\n&lt;popup_menu values=\"${countries_ar}\" default=\"Australia\"&gt;\n&lt;/perl&gt;\n\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nuse Locale::Country;\n\nsub countries {\n\n    my $self=shift();\n    my @countries = sort { $a cmp $b } all_country_names();\n    $self-&gt;render( countries_ar=&gt;\\@countries );\n\n}\n</code></pre> <p>Run</p> <p>Every time the above example is viewed the Country Name list is generated dynamically via the Locale::Country module. This is a waste of resources because the list changes very infrequently. We can keep the code neat but gain a lot of speed by adding the <code>static</code> tag attribute:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n\n&lt;!-- Generate all country names for picklist --&gt;\n\n&lt;form&gt;\n\nYour Country ?\n&lt;perl method=\"countries\" static=\"1\"&gt;\n\n&lt;!-- Note the addition of the static attribute --&gt;\n\n&lt;popup_menu values=\"${countries_ar}\"&gt;\n&lt;/perl&gt;\n\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nuse Locale::Country;\n\nsub countries {\n\n    my $self=shift();\n    my @countries = sort {$a cmp $b} all_country_names();\n    $self-&gt;render( countries_ar=&gt;\\@countries );\n\n}\n</code></pre> <p>Run</p> <p>By simply adding the \"static\" attribute output on a sample machine resulted in a 4x speedup in page loads. Judicious use of the static tag in places with slow changing data can markedly increase efficiency of the WebDyne engine.</p>"},{"location":"03_advanced_usage/#caching_section","title":"Caching","text":"<p>WebDyne has the ability to cache the compiled version of a dynamic page according to specs you set via the API. When coupled with pages/blocks that are flagged as static this presents some powerful possibilities.</p> <p>Important</p> <p>Caching will only work if <code>$WEBDYNE_CACHE_DN</code> is defined and set to a directory that the web server has write access to. If caching does not work check that $<code>WEBDYNE_CACHE_DN</code> is defined and permissions set correctly for your web server.</p> <p>There are many potential examples, but consider this one: you have a page that generates output by making a complex query to a database, which takes a lot of CPU and disk IO resources to generate. You need to update the page reasonably frequently (e.g. a weather forecast, near real time sales stats), but can't afford to have the query run every time someone view the page.</p> <p>WebDyne allows you to configure the page to cache the output for a period of time (say 5 minutes) before re-running the query. In this way users sees near real-time data without imposing a high load on the database/Web server.</p> <p>WebDyne knows to enable the caching code by looking for a meta tag, or by loading the <code>WebDyne::Cache</code> module in a __PERL__ block.</p> <p>The cache code can command WebDyne to recompile a page based on any arbitrary criteria it desires. As an example the following code will recompile the page every 10 seconds. If viewed in between refresh intervals WebDyne will serve up the cached HTML result using Apache r$-&gt;lookup_file() or the FCGI equivalent, which is very fast.</p> <p>Try it by running the following example and clicking refresh a few times over a 20 second interval</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Caching&lt;/title&gt;\n&lt;!-- Set static and cache meta parameters --&gt;\n&lt;meta name=\"WebDyne\" content=\"cache=&amp;cache;static=1\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;p&gt;\n\nThis page will update once every 10 seconds.\n\n&lt;p&gt;\n\nHello World !{! localtime() !}\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\n\n#  The following would work in place of the meta tags\n#\n#use WebDyne::Static;\n#use WebDyne::Cache (\\&amp;cache);\n\n\nsub cache {\n\n    my $self=shift();\n\n    #  Get cache file mtime (modified time)\n        #\n        my $mtime=${ $self-&gt;cache_mtime() };\n\n\n        #  If older than 10 seconds force recompile\n        #\n        if ((time()-$mtime) &gt; 10) { \n                $self-&gt;cache_compile(1) \n        };\n\n    #  Done\n    #\n    return \\undef;\n\n}\n</code></pre> <p>Run</p> <p>WebDyne uses the return value of the nominated cache routine to determine what UID (unique ID) to assign to the page. In the above example we returned \\undef, which signifies that the UID will remain unchanged.</p> <p>You can start to get more advanced in your handling of cached pages by returning a different UID based on some arbitrary criteria. To extend our example above: say we have a page that generated sales figures for a given month. The SQL code to do this takes a long time, and we do not want to hit the database every time someone loads up the page. However we cannot just cache the output, as it will vary depending on the month the user chooses. We can tell the cache code to generate a different UID based on the month selected, then cache the resulting output.</p> <p>The following example simulates such a scenario:</p> <pre><code>&lt;!-- Start to cheat by using start/end_html tags to save space --&gt;\n\n&lt;start_html&gt;\n&lt;form method=\"GET\"&gt;\nGet sales results for:&amp;nbsp;&lt;popup_menu name=\"month\" values=\"@{qw(January February March)}\"&gt;\n&lt;submit&gt;\n&lt;/form&gt;\n\n&lt;perl method=\"results\"&gt;\nSales results for +{month}: $${results}\n&lt;/perl&gt;\n\n&lt;hr&gt;\nThis page generated: !{! localtime() !}\n&lt;end_html&gt;\n\n__PERL__\n\nuse WebDyne::Static;\nuse WebDyne::Cache (\\&amp;cache);\n\nmy %results=(\n\n    January     =&gt; 20,\n    February    =&gt; 30,\n    March       =&gt; 40\n);\n\nsub cache {\n\n    #  Return UID based on month\n    #\n    my $uid=undef;\n    if (my $month=$_{'month'}) {\n\n        #  Make sure month is valid\n        #\n        $uid=$month if defined $results{$month}\n\n    }\n    return \\$uid;\n\n}\n\n\nsub results {\n\n    my $self=shift();\n    if (my $month=$_{'month'}) {\n\n        #  Could be a really long complex SQL query ...\n        #\n        my $results=$results{$month};\n\n\n        #  And display\n        #\n        return $self-&gt;render(results =&gt; $results);\n    }\n    else {\n        return \\undef;\n    }\n\n}\n</code></pre> <p>Run</p> <p>Important</p> <p>Take care when using user-supplied input to generate the page UID. There is no inbuilt code in WebDyne to limit the number of UID's associated with a page. Unless we check it, a malicious user could potentially DOS the server by supplying endless random \"months\" to the above page with a script, causing WebDyne to create a new file for each UID - perhaps eventually filling the disk partition that holds the cache directory. That is why we check the month is valid in the code above.</p>"},{"location":"03_advanced_usage/#json","title":"JSON","text":"<p>WebDyne has a &lt;json&gt; tag that can be used to present JSON data objects to Javascript libraries in an output page. Here is a very simple example:</p> <pre><code>&lt;start_html title=\"Sample JSON Chart\" script=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;\n\n&lt;h2&gt;Monthly Sales Chart&lt;/h2&gt;\n\n&lt;canvas id=\"myChart\"&gt;&lt;/canvas&gt;\n\n&lt;json handler=\"chart_data\" id=\"chartData\"&gt;\n\n&lt;script&gt;\n  // Parse JSON from the script tag\n  const data = JSON.parse(document.getElementById(\"chartData\").textContent);\n\n  const ctx = document.getElementById('myChart').getContext('2d');\n  new Chart(ctx, {\n    type: 'bar', // You can also use 'line', 'pie', etc.\n    data: {\n      labels: data.labels,\n      datasets: [{\n        label: 'Sales',\n        data: data.values,\n      }]\n    }\n  });\n&lt;/script&gt;\n\n__PERL__\n\nsub chart_data {\n\n    my %data=(\n        labels  =&gt; [qw(Jan Feb Mar Apr)],\n        values  =&gt; [(120, 150, 180, 100)]\n    );\n    return \\%data\n\n}\n</code></pre> <p>Run</p> <p>If you run it and review the source HTML you will see the JSON data rendered into the page as &lt;script&gt;&lt;/script&gt; block of type application/json with an id of \"chartData\". Any data returned by the perl routine nominated by the json tag is presented as JSON within that tag block, and available to Javascript libraries within the page. JSON data is kept in canononical order by default, which can be adjusted with the WEBDYNE_JSON_CANONICAL variable if not desired/needed for a very small speed-up.</p>"},{"location":"03_advanced_usage/#api-tags","title":"API Tags","text":"<p>WebDyne has the ability to make available a basic REST API facility using the &lt;api&gt; tag in conjunction with the Router::Simple CPAN module. Documents that utilise the &lt;api&gt; tag are somewhat unique in that:</p> <ul> <li> <p>There is no need for any other tags in the document besides the     &lt;api&gt; tag. All other tags are ignored - in fact they are     discarded.</p> </li> <li> <p>Any .psp file file an &lt;api&gt; tag will only emit JSON data with a     content type of \"<code>application/json</code>\"</p> </li> <li> <p>The REST api path must correspond .psp file at some path level, e.g.     if your path is <code>/api/user/42</code> you must have a file called either     \"<code>api.psp</code>\" or \"<code>api/user.psp</code>\" in your path.</p> </li> <li> <p>A .psp file can contain multiple &lt;api&gt; tags corresponding to     different <code>Router::Simple</code> routes</p> </li> </ul> <p>Here is a very simple example. Note the format of the URL in the Run hyperlink:</p> <pre><code>&lt;api handler=uppercase pattern=\"/api/uppercase/{user}/:id\"&gt;\n&lt;api handler=doublecase pattern=\"/api/doublecase/{user}/:id\"&gt;\n__PERL__\nsub uppercase {\n\n    my ($self, $match_hr)=@_;\n    my ($user, $id)=@{$match_hr}{qw(user id)};\n    my %data=(\n        user =&gt; uc($user),\n        id   =&gt; $id\n    );\n    return \\%data\n\n}\n\nsub doublecase {\n\n    my ($self, $match_hr)=@_;\n    my ($user, $id)=@{$match_hr}{qw(user id)};\n    my %data=(\n        user =&gt; join('_', uc($user), lc($user)),\n        id   =&gt; $id\n    );\n    return \\%data\n\n}\n</code></pre> <p>Run uppercase API example</p> <p>Run doublecase API example</p> <p>Caution</p> <p>The &lt;api&gt; tag is still somewhat experimental. Use with caution</p>"},{"location":"03_advanced_usage/#htmx","title":"HTMX","text":"<p>WebDyne has support for &lt;htmx&gt; tags to supply fragmented HTML to pages using the HTMX Javascript Library. WebDyne can support just supplying HTML snippet to pages in response to htmx calls. HTMX and WebDyne are complementary libraries which can be combined together to support dynamic pages with in-place updates from WebDybe Perl backends. Here is a simple HTML file (<code>htmx_demo1.psp</code>) incorporating HTMX calls to a backend file called <code>htmx_time1.psp</code>. Here is the display file, <code>htmx_demo1.psp</code></p> <pre><code>&lt;start_html script=\"https://unpkg.com/htmx.org@1.9.10\"&gt;\n&lt;h2&gt;Current time&lt;/h2&gt;\n&lt;p&gt;Click the button below to load time data from the server&lt;/p&gt;\n\n&lt;!-- HTMX Trigger Button --&gt;\n&lt;button \n  hx-get=\"htmx_time1.psp\"\n  hx-target=\"#time-container\"\n  hx-swap=\"innerHTML\"\n&gt;\nGet Time\n&lt;/button&gt;\n\n&lt;!-- Where the fetched HTML fragment will go --&gt;\n&lt;p&gt;\n&lt;div id=\"time-container\"&gt;\n  &lt;em&gt;Time data not loaded yet.&lt;/em&gt;\n&lt;/div&gt;\n</code></pre> <p>Run</p> <p>And the backend file which generates the HTMX data for the above page (<code>htmx_time1.psp</code>):</p> <pre><code>&lt;start_html&gt;\n&lt;htmx&gt;Server local time: &lt;? localtime() ?&gt; &lt;/htmx&gt;\n</code></pre> <p>Run</p> <p>Note the &lt;htmx&gt; tags. You can run the above htmx resource file and it will render correctly as a full HTML page - however if WebDyne detects a 'hx-request' HTTP header it will only send the fragment back.</p> <p>Important</p> <p>Only one &lt;htmx&gt; section from a file will ever be rendered. You can have multiple &lt;htmx&gt; sections in a .psp file however only one can be rendered at any time. You can use the display attribute with dynamic matching (see later) do render different &lt;htmx&gt; sections in a .psp file, or you can keep them all in different files (e.g. one &lt;htmx&gt; section per .psp file</p>"},{"location":"03_advanced_usage/#using-perl-within-htmx-tags","title":"Using Perl within &lt;htmx&gt; tags","text":"<p>&lt;htmx&gt; tags can be called with the same attributes as &lt;perl&gt; tags, including nominating a handler to generate data. See the following example:</p> <pre><code>&lt;start_html script=\"https://unpkg.com/htmx.org@1.9.10\"&gt;\n&lt;h2&gt;Current time&lt;/h2&gt;\n&lt;p&gt;Click the button below to load time data from the server&lt;/p&gt;\n\n&lt;!-- HTMX Trigger Button --&gt;\n&lt;button \n  hx-get=\"htmx_time2.psp\"\n  hx-target=\"#time-container\"\n  hx-swap=\"innerHTML\"\n&gt;\nGet Time\n&lt;/button&gt;\n\n&lt;!-- Where the fetched HTML fragment will go --&gt;\n&lt;p&gt;\n&lt;div id=\"time-container\"&gt;\n  &lt;em&gt;Time data not loaded yet.&lt;/em&gt;\n&lt;/div&gt;\n</code></pre> <p>Run</p> <p>And the backend file which generates the HTMX data for the above page:</p> <pre><code>&lt;start_html&gt;\n&lt;htmx handler=\"server_time\"&gt;\n&lt;p&gt;\nServer local time: ${server_time}\n&lt;/htmx&gt;\n\n__PERL__\n\nsub server_time {\n    my $self=shift();\n    my $time=scalar localtime;\n    for (1..3) {\n        $self-&gt;print( $self-&gt;render( server_time=&gt; $time ));\n    }\n    return \\undef;\n}\n</code></pre> <p>Run</p>"},{"location":"03_advanced_usage/#using-multiple-htmx-tags-in-one-psp-file","title":"Using multiple &lt;htmx&gt; tags in one .psp file","text":"<p>As is mentioned above only one &lt;htmx&gt; fragment can be returned by a .psp page at a time - but you can use techniques to select which tag should be rendered. The &lt;htmx&gt; tag supports the display attribute. If this attribute exists and is a \"true\" value then the &lt;htmx&gt; fragment will be returned. At first this doesn't seem very useful - but when combined with dynamic evaluation via either page query parameters or <code>!{! .. !}</code> evaluation it becomes more compelling. Take the following two button example:</p> <pre><code>&lt;start_html script=\"https://unpkg.com/htmx.org@1.9.10\"&gt;\n&lt;h2&gt;HTMX Demo&lt;/h2&gt;\n&lt;p&gt;\nClick the button below to load time data from the server.&lt;/p&gt;\n\n&lt;!-- HTMX Trigger Button for Local Time --&gt;\n&lt;button \n  style=\"width:180px\"\n  hx-get=\"/htmx_time3.psp\"\n  hx-target=\"#time-container\"\n  hx-swap=\"innerHTML\"\n  hx-vals=\"js:{ time_local: 1 }\"\n&gt;\nGet Local Time\n&lt;/button&gt;\n\n&lt;p&gt;\n\n&lt;!-- HTMX Trigger Button for UTC Time --&gt;\n&lt;button \n  style=\"width:180px\"\n  hx-get=\"/htmx_time3.psp\"\n  hx-target=\"#time-container\"\n  hx-swap=\"innerHTML\"\n  hx-vals=\"js:{ time_utc: 1 }\"\n&gt;\nGet UTC Time\n&lt;/button&gt;\n\n&lt;!-- Where the fetched HTML fragment will go --&gt;\n&lt;p&gt;\n&lt;div id=\"time-container\"&gt;\n  &lt;em&gt;Time data not loaded yet.&lt;/em&gt;\n&lt;/div&gt;\n</code></pre> <p>Run</p> <pre><code>&lt;htmx display=\"+{time_local}\"&gt; Time Local: &lt;? localtime() ?&gt;&lt;/htmx&gt;\n&lt;htmx display=\"+{time_utc}\"&gt; Time UTC: &lt;? gmtime() ?&gt;&lt;/htmx&gt;\n</code></pre> <p>Run</p> <p>Normally you would expect to have the hx-get attribute for each button go to a different .psp page. But in this instance they refer to the same page. So how do we discriminate ? The key is in the supply of the hx-vals attribute, which allows us to send query strings to the htmx resource page. We can then use them to select which &lt;htmx&gt; block is returned.</p> <p>Note</p> <p>Note the use of <code>js:{ &lt;json&gt; }</code> notation in the &lt;htmx&gt; <code>hx-vals</code> attribute. It allows for easier supply of JSON data without needed to manipulate/escape double-quotes in raw JSON data. You'll also note there is no &lt;start_html&gt; tag. It's not necessary for &lt;htmx&gt; pages.</p>"},{"location":"03_advanced_usage/#dump","title":"Dump","text":"<p>The &lt;dump&gt; tag is a informational element which can be included in a page for diagnostic or debugging purposes. It will show various variable and state values for the page. By default if a &lt;dump&gt; flag is embedded in a page diagnostic information is not shown unless the <code>force</code> attribute is specified or the <code>$WEBDYNE_DUMP_FLAG</code> is set, the latter allowing the &lt;dump&gt; tag to be embedded into all pages on a site but not activated unless debugging enabled.</p> <p>Various diagnostic elements can be displayed - see the &lt;dump&gt; tag section for information on what they are. In this example all components are enabled and display is forced:</p> <pre><code>&lt;start_html&gt;\n&lt;p&gt;\n&lt;form&gt;\nYour Name: &lt;textfield name=\"name\"&gt;\n&lt;p&gt;\n&lt;submit&gt;\n&lt;/form&gt;\n&lt;dump all force&gt;\n</code></pre> <p>Run</p> <p>Dump display/hide can be controlled by form parameters or run URI query strings. In the example below ticking the checkbox or simply appending \"?dump_enable=1\" to the URL will display the dump information:</p> <pre><code>&lt;start_html&gt;\n&lt;p&gt;\n&lt;form&gt;\nYour Name: &lt;textfield name=\"name\"&gt;\n&lt;p&gt;\nShow Dump: &lt;checkbox name=\"dump_enable\"&gt;\n&lt;p&gt;\n&lt;submit&gt;\n&lt;/form&gt;\n&lt;dump all force=\"!{! $_{'dump_enable'} !}\"&gt;\n</code></pre> <p>Run</p>"},{"location":"04_error_handling/","title":"Error Handling","text":""},{"location":"04_error_handling/#error-messages","title":"Error Messages","text":"<p>Sooner or later something is going to go wrong in your code. If this happens WebDyne will generate an error showing what the error was and attempting to give information on where it came from: Take the following example:</p> <pre><code>&lt;start_html title=\"Error\"&gt;\nLet's divide by zero: !{! my $z=0; return 5/$z !}\n&lt;end_html&gt;\n</code></pre> <p>Run</p> <p>If you run the above example an error message will be displayed</p> <p></p> <p>In this example the backtrace is within in-line code, so all references in the backtrace are to internal WebDyne modules. The code fragment will show the line with the error.</p> <p>If we have a look at another example:</p> <pre><code>&lt;start_html title=\"Error\"&gt;\n&lt;perl method=\"hello\"/&gt;\n&lt;end_html&gt;\n\n__PERL__\n\nsub hello {\n\n    die('bang !');\n\n}\n</code></pre> <p>Run</p> <p>And the corresponding screen shot:</p> <p></p> <p>We can see that the error occurred in the \"hello\" subroutine (invoked at line 2 of the page) within the perl block on line 9. The 32 digit hexadecimal number is the page unique ID - it is different for each page. WebDyne runs the code for each page in a package name space that includes the page's UID - in this way pages with identical subroutine names (e.g. two pages with a \"hello\" subroutine) can be accommodated with no collision.</p>"},{"location":"04_error_handling/#exceptions","title":"Exceptions","text":"<p>Errors (exceptions) can be generated within a WebDyne page in two ways:</p> <ul> <li> <p>By calling die() as shown in example above.</p> </li> <li> <p>By returning an error message via the err() method, exported by     default.</p> </li> </ul> <p>Examples</p> <pre><code>__PERL__\n\n\n#  Good\n#\nsub hello {\n\n    return err('no foobar') if !$foobar;\n\n}\n\n# Also OK\n#\nsub hello {\n\n    return die('no foobar') if !$foobar;\n\n}\n</code></pre>"},{"location":"04_error_handling/#error-checking","title":"Error Checking","text":"<p>So far all the code examples have just assumed that any call to a WebDyne API method has been successful - no error checking is done. WebDyne always returns \"undef\" if an API method call fails - which should be checked for after every call in a best practice scenario.</p> <pre><code>&lt;start_html title=\"Error\"&gt;\n&lt;perl method=\"hello\"&gt;\n\nHello World ${foo}\n\n&lt;/perl&gt;\n&lt;end_html&gt;\n\n__PERL__\n\nsub hello {\n\n    #  Check for error after calling render function\n    #\n    shift()-&gt;render( bar=&gt; 'Again') || return err();\n\n}\n</code></pre> <p>Run</p> <p>You can use the err() function to check for errors in WebDyne Perl code associated with a page, e.g.:</p> <pre><code>&lt;start_html title=\"Error\"&gt;\n&lt;form&gt;\n&lt;submit name=\"Error\" value=\"Click here for error !\"&gt;\n&lt;/form&gt;\n&lt;perl method=\"foo\"/&gt;&lt;end_html&gt;\n\n__PERL__\n\nsub foo {\n\n    &amp;bar() || return err();\n    \\undef;\n\n}\n\nsub bar {\n\n    return err('bang !') if $_{'Error'};\n    \\undef;\n}\n</code></pre> <p>Run</p> <p>Note that the backtrace in this example shows clearly where the error was triggered from.</p>"},{"location":"05_webdyne_api/","title":"WebDyne API","text":""},{"location":"05_webdyne_api/#webdyne-tags","title":"WebDyne tags","text":"<p>Reference of WebDyne tags and supported attributes</p> &lt;perl&gt; <p>Run Perl code either in-line (between the &lt;perl&gt;..&lt;/perl&gt;) tags, or non-inline via the method attribute</p> method|handler=method <p>Call an external Perl subroutine in from a module, or a subroutine in a __PERL__ block at the of the .psp file. If the handler is specified a module call (e.g. Digest::MD5::md5_hex()) then a require call will be load the module (Digest::MD5 in this example.</p> package|require=[Module::Name] | [Path/Filename.pm] <p>Load a Perl module or file needed to support a method call. E.g. &lt;perl require=Digest::MD5/&gt; to load the Digest::MD5 module. Anything with a [./\\] character is treated as file patch to a Perl file (e.g. \"/home/user/module.pm\"), otherwise it is treated as module name (\"Digest::MD5\")</p> import=[function], &lt;function&gt;, &lt;function&gt; .. <p>Import a single or multiple functions into the file namespace. Use \"import=name\" for a single function, or pass an array ref (import=\"@{name1, name2}\" for multiple functions. E.g. &lt;perl require=\"Digest::SHA\" import=\"@{qw(sha1 sha1_hex)}\"/&gt;. Functions are then available anywhere in the file namespace.</p> param=scalar|array|hash <p>Parameters to be supplied to perl routine. Supply array and hash using \"@{1,2}\" and \"%{a=&gt;1, b=&gt;2}\" conventions respectively, e.g. &lt;perl method=\"sum2num\" param=\"@{2,2}\"/&gt;</p> static=1 <p>This Perl code to be run once only and the output cached for all subsequent requests.</p> file=1 <p>Force package|require attribute to be treated as a file, even if it appears to \"look like\" a module name to the loader. Rarely needed, use case would be a Perl module in the current directory without an extension.</p> hidden=1 <p>The output from the Perl module will be hidden.</p> &lt;json&gt; <p>Run Perl code similar to &lt;perl&gt; tag but expect code to return a HASH or ARRAY ref and encode into JSON, outputting in a &lt;script&gt; tag with type=\"application/json\". When supplied with an id attribute this data can be used by any Javascript function in the page. All attributes are the same as the &lt;perl&gt; tag with the following extra attribute</p> id=[name] <p>ID this &lt;script&gt; tag will be given, e.g. &lt;script id=\"mydata\" type=\"application/json\"&gt;[{\"foo\":1}]&lt;/script&gt;</p> &lt;block&gt; <p>Block of HTML code to be optionally rendered if desired by call to render_block Webdyne method:</p> name=identifier <p>Mandatory. The name for this block of HTML. Referenced when rendering a particular block in perl code, e.g. return $self-&gt;render_block(\"foo\");</p> display=1 <p>Force display of this block even if not invoked by render_block WebDyne method. Useful for prototyping.</p> static=1 <p>This block rendered once only and the output cached for all subsequent requests</p> &lt;include&gt; <p>Include HTML or text from an external file. This includes pulling in the &lt;head&gt; or &lt;body&gt; section from another HTML or .psp file. If pulled in from a .psp file it will compiled and interpreted in the context of the current page.</p> file=filename <p>Mandatory. Name of file we want to include. Can be relative to current directory or absolute path.</p> head=1 <p>File is an HTML or <code>.psp</code> file and we want to include just the &lt;head&gt; section</p> body=1 <p>File is an HTML or <code>.psp</code> file and we want to include just the &lt;body&gt; section.</p> block=blockname <p>File is a <code>.psp</code> file and we want to include a &lt;block&gt; section from that file.</p> nocache <p>Don't cache the results of the include, bring them in off disk each time. Will incur performance penalty</p> &lt;api&gt; <p>Respond to a JSON request made from a client.</p> pattern=string <p>Mandatory. Name of <code>Route::Simple</code> pattern we want to serve, e.g. /api/{user}/:id</p> destination | dest | data=hash ref <p>Hash we want to supply to perl routine if match made. See <code>Route::Simple</code></p> option=hash ref <p>Match options, GET, PUT etc. <code>Route::Simple</code></p> &lt;htmx&gt; <p>Serve HTML snippets. Takes exactly the same parameters as the &lt;perl&gt; tag with one addition</p> display=boolean <p>Optional. If evaluates to true then this &lt;htmx&gt; snippet fires. Only tag can respond per page. Use this attribute in conjunction with dynamic evaluation (e.g. display=\"!{! $_{name} eq 'Bob' !}\")</p> &lt;dump&gt; <p>Display CGI parameters in dump format via CGI::Simple-&gt;Dump call. Useful for debugging. Only rendered if <code>$WEBDYNE_DUMP_FLAG</code> global set to 1 in WebDyne constants of the display|force attribute specified (see below). Useful while troubleshooting or debugging pages.</p> display|force=1 <p>Optional. Force display even if <code>$WEBDYNE_DUMP_FLAG</code> global not set</p> all <p>Display all diagnostic blocks</p> cgi <p>Display CGI parameters and query strings</p> env <p>Display environment variables</p> constant <p>Display Webdyne constants</p> version <p>Display version strings</p>"},{"location":"05_webdyne_api/#webdyne-methods","title":"WebDyne methods","text":"<p>When running Perl code within a WebDyne page the very first parameter passed to any routine (in-line or in a __PERL__ block) is an instance of the WebDyne page object (referred to as <code>$self</code> in most of the examples). All methods return undef on failure, and raise an error using the <code>err()</code> function. The following methods are available to any instance of the WebDyne object:</p> CGI() <p>Returns an instance of the CGI::Simple object for the current request.</p> r(), request() <p>Returns an instance of the Apache request object, or a mock object with similar functionality when running under PSGI or FCGI</p> html_tiny() <p>Returns an instance of the HTML::Tiny object, can be used for creating programmatic HTML output</p> include() <p>Returns HTML derived from a file, using the same parameters as the &lt;include&gt; tag</p> render( &lt;key=&gt;value, key=&gt;value&gt;, .. ) <p>Called to render the text or HTML between &lt;perl&gt;..&lt;/perl&gt; tags. Optional key and value pairs will be substituted into the output as per the variable section. Returns a scalar ref of the resulting HTML.</p> render_block( blockname, &lt;key=&gt;value, key=&gt;value, ..&gt;). <p>Called to render a block of text or HTML between &lt;block&gt;..&lt;/block&gt; tags. Optional key and value pairs will be substituted into the output as per the variable section. Returns scalar ref of resulting HTML if called with from &lt;perl&gt;..&lt;/perl&gt; section containing the block to be rendered, or true (\\undef) if the block is not within the &lt;perl&gt;..&lt;/perl&gt; section (e.g. further into the document, see the block section for an example).</p> render_reset() <p>Erase anything previously set to render - it will not be sent to the browser.</p> redirect( uri=&gt;uri | file=&gt;filename | html=&gt;\\html_text | json=&gt;\\json_text | text=&gt;\\plain_text) <p>Will redirect to URI or file nominated, or display only nominated text. Any rendering done to prior to this method is abandoned. If supplying HTML text to be rendered supply as a SCALAR reference.</p> cache_inode( &lt;seed&gt; ) <p>Returns the page unique ID (UID). Called inode for legacy reasons, as that is what the UID used to be based on. If a seed value is supplied a new UID will be generated based on an MD5 of the seed. Seed only needs to be supplied if using advanced cache handlers.</p> cache_mtime( &lt;uid&gt; ) <p>Returns the mtime (modification time) of the cache file associated with the optionally supplied UID. If no UID supplied the current one will be used. Can be used to make cache compile decisions by WebDyne::Cache code (e.g if page &gt; x minutes old, recompile).</p> source_mtime() <p>Returns the mtime (modification time) of the source .psp file currently being rendered.</p> cache_compile() <p>Force recompilation of cache file. Can be used in cache code to force recompilation of a page, even if it is flagged static. Returns current value if no parameters supplied, or sets if parameter supplied.</p> filename() <p>Return the full filename (including path) of the file being rendered. Will only return the core (main) filename - any included files, templates etc. are not reported.</p> cwd() <p>Return the current working directory WebDyne is operating in.</p> no_cache() <p>Send headers indicating that the page is not be cached by the browser or intermediate proxies. By default WebDyne pages automatically set the no-cache headers, although this behaviour can be modified by clearing the <code>$WEBDYNE_NO_CACHE</code> variable and using this function</p> meta() <p>Return a hash ref containing the meta data for this page. Alterations to meta data are persistent for this process, and carry across Apache requests (although not across different Apache processes)</p> print(), printf(), say() <p>Render the output of the print(), printf() or say() routines into the current HTML stream. The print() and printf() methods emulate their Perl functions in not appending a new line into the output, where as say() does.</p> render_time() <p>Return the elapsed time since the WebDyne hander started rendering this page. Obviously only meaningful if called at the end of a page, just before final output to browser.</p>"},{"location":"05_webdyne_api/#webdyne_constants","title":"WebDyne Constants","text":"<p>Constants defined in the WebDyne::Constant package control various aspects of how WebDyne behaves. Constants can be modified globally by altering a global configuration file (<code>/etc/webdyne.conf.pl</code> under Linux distros), setting environment variable or by altering configuration parameters within the Apache web server config.</p>"},{"location":"05_webdyne_api/#global-constants-file","title":"Global constants file","text":"<p>WebDyne will look for a system constants file under <code>/etc/webdyne.conf.pl</code> and set package variables according to values found in that file. The file is in Perl Data::Dumper format, and takes the format:</p> <pre><code># sample /etc/webdyne.conf.pl file\n#\n$VAR1={\n        WebDyne::Constant =&gt; {\n\n                WEBDYNE_CACHE_DN       =&gt; '/data1/webdyne/cache',\n                WEBDYNE_STORE_COMMENTS =&gt; 1,\n                #  ... more variables for WebDyne package\n\n       },\n\n       WebDyne::Session::Constant =&gt; {\n\n                WEBDYNE_SESSION_ID_COOKIE_NAME =&gt; 'session_cookie',\n                #  ... more variables for WebDyne::Session package\n\n       },\n\n};\n</code></pre> <p>The file is not present by default and should be created if you wish to change any of the WebDyne constants from their default values.</p> <p>Important</p> <p>Always check the syntax of the <code>/etc/webdyne.conf.pl</code> file after editing by running <code>perl -c -w /etc/webdyne.conf.pl</code> to check that the file is readable by Perl. Files with syntax errors will fail silently and the variables will revert to module defaults.</p>"},{"location":"05_webdyne_api/#setting-webdyne-constants-in-apache","title":"Setting WebDyne constants in Apache","text":"<p>WebDyne constants can be set in an Apache httpd.conf file using the PerlSetVar directive:</p> <pre><code>PerlHandler     WebDyne\nPerlSetVar      WEBDYNE_CACHE_DN                '/data1/webdyne/cache'\nPerlSetVar      WEBDYNE_STORE_COMMENTS          1\n\n#  From WebDyne::Session package\n#\nPerlSetVar      WEBDYNE_SESSION_ID_COOKIE_NAME  'session_cookie'\n</code></pre> <p>Important</p> <p>WebDyne constants cannot be set on a per-location or per-directory basis - they are read from the top level of the config file and set globally.</p> <p>Some 1.x versions of mod_perl do not read PerlSetVar variables correctly. If you encounter this problem use a &lt;Perl&gt;..&lt;/Perl&gt; section in the <code>httpd.conf</code> file, e.g.:</p> <pre><code># Mod_perl 1.x\n\nPerlHandler     WebDyne\n&lt;Perl&gt;\n$WebDyne::Constant::WEBDYNE_CACHE_DN='/data1/webdyne/cache';\n$WebDyne::Constant::WEBDYNE_STORE_COMMENTS=1;\n$WebDyne::Session::Constant::WEBDYNE_SESSION_ID_COOKIE_NAME='session_cookie';\n&lt;/Perl&gt;\n</code></pre> <p>Where you need to set variables without simple string content you can use a &lt;Perl&gt;..&lt;/Perl&gt; section in the <code>httpd.conf</code> file, e.g.:</p> <pre><code># Setting more complex variables\n\nPerlHandler     WebDyne\n&lt;Perl&gt;\n$WebDyne::Constant::WEBDYNE_CACHE_DN='/data1/webdyne/cache';\n$WebDyne::Constant::WEBDYNE_STORE_COMMENTS=1;\n$WebDyne::Session::Constant::WEBDYNE_SESSION_ID_COOKIE_NAME='session_cookie';\n&lt;/Perl&gt;\n</code></pre> <p>Warning</p> <p>The letsencrypt <code>certbot</code> utility will error out when trying to update any Apache config file with <code>&lt;Perl&gt;</code> sections. To avoid this you put the variables in a separate file and include them, e.g. in the <code>apache.conf</code> file:</p> <pre><code># Some config setting defaults. See documentation for full range. \n# Commented out # options represent defaults \n#\nPerlRequire conf.d/webdyne_constant.pl\n</code></pre> <p>And then in the webdyne_constant.pl file:</p> <pre><code>use WebDyne;\nuse WebDyne::Constant;\n\n#  Error display/extended display on/off. More granular options below. \n#  Set to 1 to enable, 0 to disable\n#\n$WebDyne::WEBDYNE_ERROR_SHOW=1;\n$WebDyne::WEBDYNE_ERROR_SHOW_EXTENDED=1;\n\n#  Extended error control.\n#\n#  $WebDyne::WEBDYNE_ERROR_SOURCE_CONTEXT_SHOW=1;\n#  $WebDyne::WEBDYNE_ERROR_SOURCE_CONTEXT_LINES_PRE=4;\n#  $WebDyne::WEBDYNE_ERROR_SOURCE_CONTEXT_LINES_POST=4;\n</code></pre>"},{"location":"05_webdyne_api/#constants-reference","title":"Constants Reference","text":"<p>The following constants can be altered to change the behaviour of the WebDyne package. All these constants reside in the <code>WebDyne::Constant</code> package namespace.</p> <code>$WEBDYNE_CACHE_DN</code> <p>The name of the directory that will hold partially compiled WebDyne cache files. Must exist and be writable by the Apache process</p> <code>$WEBDYNE_STARTUP_CACHE_FLUSH</code> <p>Remove all existing disk cache files at Apache startup. 1=yes (default), 0=no. By default all disk cache files are removed at startup, and thus pages must be recompiled again the first time they are viewed. If you set this to 0 (no) then disk cache files will be saved between startups and pages will not need to be re-compiled if Apache is restarted.</p> <code>$WEBDYNE_CACHE_CHECK_FREQ</code> <p>Check the memory cache after this many request (per-process counter). default=256. After this many requests a housekeeping function will check compiled pages that are stored in memory and remove old ones according to the criteria below.</p> <code>$WEBDYNE_CACHE_HIGH_WATER</code> <p>Remove compiled from pages from memory when we have more than this many. default=64</p> <code>$WEBDYNE_CACHE_LOW_WATER</code> <p>After reaching HIGH_WATER delete until we get down to this amount. default=32</p> <code>$WEBDYNE_CACHE_CLEAN_METHOD</code> <p>Clean algorithm. default=1, means least used cleaned first, 0 means oldest last view cleaned first</p> <code>$WEBDYNE_EVAL_SAFE</code> <p>default=0 (no), If set to 1 means eval in a Safe.pm container. Evaluating code in a Safe container is experimental and not supported or recommended for general WebDyne use.</p> <code>$WEBDYNE_EVAL_SAFE_OPCODE_AR</code> <p>The opcode set to use in Safe.pm evals (see the Safe man page). Defaults to \"[':default']\". Use [&amp;Opcode::full_opset()] for the full opset. CAUTION Use of WebDyne with Safe.pm not comprehensively tested and considered experimental.</p> <code>$WEBDYNE_EVAL_USE_STRICT</code> <p>The string to use before each eval. Defaults to \"use strict qw(vars);\". Set to undef if you do not want strict.pm. In Safe mode this becomes a flag only - set undef for \"no strict\", and non-undef for \"use strict\" equivalence in a Safe mode (checked under Perl 5.8.6 only, results in earlier versions of Perl may vary).</p> <code>$WEBDYNE_STRICT_VARS</code> <p>Check if a var is declared in a render block (e.g $ {foo}) but not supplied as a render parameter. If so will throw an error. Set to 0 to ignore. default=1</p> <code>$WEBDYNE_DUMP_FLAG</code> <p>If 1, any instance of the special &lt;dump&gt; tag will print out results from CGI-&gt;dump(). Use when debugging forms. default=0</p> <code>$WEBDYNE_DTD</code> <p>The DTD to place at the top of a rendered page. Defaults to: &lt;!DOCTYPE html&gt;</p> <code>$WEBDYNE_HTML_PARAM</code> <p>attributes for the &lt;html&gt; tag, default is { lang =&gt;'en' }</p> <code>$WEBDYNE_HEAD_INSERT</code> <p>Any HTML you want inserted before the closing &lt;/head&gt; tag, e.g. stylesheet or script includes to be added to every <code>.psp</code> page. Must be valid HTML &lt;head&gt; directives, not interpreted or compiled by WebDyne, incorporated as-is</p> <code>$WEBDYNE_COMPILE_IGNORE_WHITESPACE</code> <p>Ignore source file whitespace as per HTML::TreeBuilder ignore_ignorable_whitespace function. Defaults to 1</p> <code>$WEBDYNE_COMPILE_NO_SPACE_COMPACTING</code> <p>Do not compact source file whitespace as per HTML::TreeBuilder no_space_compacting function. Defaults to 0</p> <code>$WEBDYNE_STORE_COMMENTS</code> <p>By default comments are not rendered. Set to 1 to store and display comments from source files. Defaults to 0</p> <code>$WEBDYNE_NO_CACHE</code> <p>WebDyne should send no-cache HTTP headers. Set to 0 to not send such headers. Defaults to 1</p> <code>$WEBDYNE_DELAYED_BLOCK_RENDER</code> <p>By default WebDyne will render blocks targeted by a render_block() call, even those that are outside the originating &lt;perl&gt;..&lt;/perl&gt; section that made the call. Set to 0 to not render such blocks. Defaults to 1</p> <code>$WEBDYNE_WARNINGS_FATAL</code> <p>If a programs issues a warning via warn() this constant determines if it will be treated as a fatal error. Default is 0 (warnings not fatal). Set to 1 if you want any warn() to behave as if die() had been called..</p> <code>$WEBDYNE_CGI_DISABLE_UPLOADS</code> <p>Disable CGI::Simple file uploads. Defaults to 1 (true - do not allow uploads).</p> <code>$WEBDYNE_CGI_POST_MAX</code> <p>Maximum size of a POST request. Defaults to 512Kb</p> <code>$WEBDYNE_JSON_CANONICAL</code> <p>Set is JSON encoding should be canonical, i.e. respect the order of supplied data (slightly slows down encoding). Defaults to 1 (true - preserve variable order)</p> <code>$WEBDYNE_ERROR_TEXT</code> <p>Display simplified errors in plain text rather than using HTML. Useful in internal WebDyne development only. By default this is 0 =&gt; the HTML error handler will be used.</p> <code>$WEBDYNE_ERROR_SHOW</code> <p>Display the error message. Only applicable in the HTML error handler</p> <code>$WEBDYNE_ERROR_SOURCE_CONTEXT_SHOW</code> <p>Display a fragment of the <code>.psp</code> source file around where the error occurred to give some context of where the error happened. Set to 0 to not display context.</p> <code>$WEBDYNE_ERROR_SOURCE_CONTEXT_LINES_PRE</code> <p>Number of lines of the source file before the error occurred to display. Defaults to 4</p> <code>$WEBDYNE_ERROR_SOURCE_CONTEXT_LINES_POST</code> <p>Number of lines of the source file after the error occurred to display. Defaults to 4</p> <code>$WEBDYNE_ERROR_SOURCE_CONTEXT_LINE_FRAGMENT_MAX</code> <p>Max line length to show. Defaults to 80 characters.</p> <code>$WEBDYNE_ERROR_BACKTRACE_SHOW</code> <p>Show a backtrace of modules through which the error propagated. On by default, set to 0 to disable,</p> <code>$WEBDYNE_ERROR_BACKTRACE_SHORT</code> <p>Remove WebDyne internal modules from backtrace. Off by default, set to 1 to enable.</p> <code>$WEBDYNE_AUTOLOAD_POLLUTE</code> <p>When a method is called from a &lt;perl&gt; routine the WebDyne AUTOLOAD method must search multiple modules for the method owner. Setting this flag to 1 will pollute the WebDyne name space with the method name so that AUTOLOAD is not called if that method is used again (for the duration of the Perl process, not just that call to the page). This is dangerous and can cause confusion if different modules use the same name. In very strictly controlled environments - and even then only in some cases - it can result is faster throughput. Off by default, set to 1 to enable.</p> <p>Extension modules (e.g., WebDyne::Session) have their own constants - see each package for details.</p>"},{"location":"05_webdyne_api/#webdyne-directives","title":"WebDyne Directives","text":"<p>A limited number of directives are are available which change the way WebDyne processes pages. Directives are set in either the Apache .conf files and can be set differently per location. At this stage only one directive applies to the core WebDyne module:</p> <code>WebDyneHandler</code> <p>The name of the handler that WebDyne should invoke instead of handling the page internally. The only other handler available today is WebDyne::Chain.</p> <p>This directive exists primarily to allow PSGI to invoke WebDyne::Chain as the primary handler. It can be used in Apache httpd.conf files, but is not very efficient:</p> <pre><code>#  This will work, but is not very efficient\n#\n&lt;location /shop/&gt;\nPerlHandler     WebDyne\nPerlSetVar      WebDyneHandler               'WebDyne::Chain'\nPerlSetVar      WebDyneChain                 'WebDyne::Session'\n&lt;/location&gt;\n\n\n#  This is the same, and is more efficient\n#\n&lt;location /shop/&gt;\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain                 'WebDyne::Session'\n&lt;/location&gt;\n</code></pre>"},{"location":"06_miscellaneous/","title":"Miscellaneous","text":""},{"location":"06_miscellaneous/#command-line-utilities","title":"Command Line Utilities","text":"<p>Command line utilities are fairly basic at this stage. Installation location will vary depening on your distribution - most will default to <code>/usr/local/bin</code>, but may be installed elsewhere in some cases, especially if you have nominated a <code>PREFIX</code> option when using CPAN.</p> <code>wdapacheinit</code> <p>Runs the WebDyne initialization routines, which create needed directories, modify and create Apache .conf files etc.</p> <code>wdcompile</code> <p>Usage: <code>wdcompile filename.psp</code>. Will compile a .psp file and use Data::Dumper to display the WebDyne internal representation of the page tree structure. Useful as a troubleshooting tool to see how HTML::TreeBuilder has parsed your source file, and to show up any misplaced tags etc.</p> <code>wdrender</code> <p>Usage: <code>wdrender filename.psp</code>. Will attempt to render the source file to screen using WebDyne. Can only do basic tasks - any advanced use (such as calls to the Apache request object) will fail.</p> <code>wddump</code> <p>Usage: <code>wddump filename</code>. Where filename is a compiled WebDyne source file (usually in /var/webdyne/cache). Will dump out the saved data structure of the compiled file.</p> <code>wddebug</code> <p>Usage: <code>wddebug --status|--enable|--disable</code>. Enable/disable debugging in the WebDyne code.</p> <code>webdyne.psgi</code> <p>Used to run WebDyne as a PSGI process- usually invoked by Plack via plackup or starman, but can be run directly for development purposes.</p> wdlint <p>Run perl -c -w over code in __PERL__ sections on any .psp file to check for syntax errors.</p>"},{"location":"06_miscellaneous/#other-files-referenced-by-webdyne","title":"Other files referenced by WebDyne","text":"<code>/etc/webdyne.conf.pl</code> <p>Used for storage of local constants that override WebDyne defaults. See the            \"WebDyne::Constant\"          section for details</p>"},{"location":"07_extending_webdyne/","title":"Extending WebDyne","text":"<p>WebDyne can be extended by the installation and use of supplementary Perl packages. There are several standard packages that come with the Webdyne distribution, or you can build your own using one of the standard packages as a template.</p> <p>The following gives an overview of the standard packages included in the distribution, or downloadable as extensions from CPAN.</p>"},{"location":"07_extending_webdyne/#webdyne_chain","title":"WebDyne::Chain","text":"<p>WebDyne::Chain is a module that will cascade a WebDyne request through one or more modules before delivery to the WebDyne engine. Most modules that extend WebDyne rely on WebDyne::Chain to get themselves inserted into the request lifecycle.</p> <p>Whilst WebDyne::Chain does not modify content itself, it allows any of the modules below to intercept the request as if they had been loaded by the target page directly (i.e., loaded in the __PERL__ section of a page via the \"use\" or \"require\" functions).</p> <p>Using WebDyne::Chain you can modify the behaviour of WebDyne pages based on their location. The WebDyne::Template module can be used in such scenario to wrap all pages in a location with a particular template. Another would be to make all pages in a particular location static without loading the WebDyne::Static module in each page:</p> <pre><code>&lt;Location /static&gt;\n\n#  All pages in this location will be generated once only.\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Static'\n\n&lt;/Location&gt;\n</code></pre> <p>Multiple modules can be chained at once:</p> <pre><code>&lt;Location /&gt;\n\n#  We want templating and session cookies for all pages on our site.\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Session WebDyne::Template'\nPerlSetVar      WebDyneTemplate '/path/to/template.psp'\n\n&lt;/Location&gt;\n</code></pre> <p>The above example would place all pages within the named template, and make session information to all pages via $self-&gt;session_id(). A good start to a rudimentary CMS.</p> WebDyneChain <p>Directive. Supply a space separated string of WebDyne modules that the request should be passed through.</p>"},{"location":"07_extending_webdyne/#webdynestatic","title":"WebDyne::Static","text":"<p>Loading WebDyne::Static into a __PERL__ block flags to WebDyne that the entire page should be rendered once at compile time, then the static HTML resulting from that compile will be handed out on subsequent requests. Any active element or code in the page will only be run once. There are no API methods associated with this module</p> <p>See the                \"Static Sections\"              reference for more information on how to use this module within an individual page.</p> <p>WebDyne::Static can also be used in conjunction with the</p> <pre><code>          \"[WebDyne::Chain](07_extending_webdyne.md#webdyne_chain)\"\n         module to flag all files in a directory\n</code></pre> <p>or location as static. An example httpd.conf snippet:</p> <pre><code>&lt;Location /static/&gt;\n\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Static'\n\n&lt;/Location&gt;\n</code></pre>"},{"location":"07_extending_webdyne/#webdynecache","title":"WebDyne::Cache","text":"<p>Loading WebDyne::Cache into a __PERL__ block flags to WebDyne that the page wants the engine to call a designated routine every time it is run. The called routine can generate a new UID (Unique ID) for the page, or force it to be recompiled. There are no API methods associated with this module.</p> <p>See the                \"Caching\"              section above for more information on how to use this module with an individual page.</p> <p>WebDyne::Cache can also be used in conjunction with the</p> <pre><code>          \"[WebDyne::Chain](07_extending_webdyne.md#webdyne_chain)\"\n         module to flag all files in a\n</code></pre> <p>particular location are subject to a cache handling routine. An example httpd.conf snippet:</p> <pre><code>&lt;Location /cache/&gt;\n\n#  Run all requests through the MyModule::cache function to see if a page should\n#  be recompiled before sending it out\n#\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Cache'\nPerlSetVar      WebDyneCacheHandler '&amp;MyModule::cache'\n\n&lt;/Location&gt;\n</code></pre> <p>Note that any package used as the WebDyneCacheHandler target should be already loaded via \"PerlRequire\" or similar mechanism.</p> <p>As an example of why this could be useful consider the                \"caching examples\"              above. Instead of flagging that an individual file should only be re-compiled every x seconds, that policy could be applied to a whole directory with no alteration to the individual pages.</p>"},{"location":"07_extending_webdyne/#webdynesession","title":"WebDyne::Session","text":"<p>WebDyne::Session generates a unique session ID for each browser connection and stores it in a cookie. It has the following API:</p> session_id() <p>Function. Returns the unique session id assigned to the browser. Call via $self-&gt;session_id() from perl code.</p> <code>$WEBDYNE_SESSION_ID_COOKIE_NAME</code> <p>Constant. Holds the name of the cookie that will be used to assign the session id in the users browser. Defaults to \"session\". Set as per            \"WebDyne::Constants\"          section. Resides in the <code>WebDyne::Session::Constant</code> package namespace.</p> <p>Example:</p> <pre><code>&lt;start_html&gt;\n\nSession ID: !{! shift()-&gt;session_id() !}\n\n&lt;end_html&gt;\n\n__PERL__\n\nuse WebDyne::Session;\n1;\n</code></pre> <p>Run</p> <p>WebDyne::Session can also be used in conjunction with the</p> <pre><code>          \"[WebDyne::Chain](07_extending_webdyne.md#webdyne_chain)\"\n         module to make session information\n</code></pre> <p>available to all pages within a location. An example httpd.conf snippet:</p> <pre><code>&lt;Location /&gt;\n\n# We want session cookies for our whole site\n#\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Session'\n\n#  Change cookie name from \"session\" to \"gingernut\" for something different\n#\nPerlSetVar      WEBDYNE_SESSION_ID_COOKIE_NAME    'gingernut'\n\n&lt;/Location&gt;\n</code></pre>"},{"location":"07_extending_webdyne/#webdynetemplate","title":"WebDyne::Template","text":"<p>One of the more powerful WebDyne extensions. WebDyne::Template can be used to build CMS (Content Management Systems). It will extract the &lt;head&gt; and &lt;body&gt; sections from an existing HTML or WebDyne page and insert them into the corresponding head and body blocks of a template file.</p> <p>The merging is done once at compile time - there are no repeated search and replace operations each time the file is loaded, or server side includes, so the resulting pages are quite fast.</p> <p>Both the template and content files should be complete - there is no need to write the content without a &lt;head&gt; section, or leave out &lt;html&gt; tags. As a result both the content and template files can be viewed as standalone documents.</p> <p>The API:</p> template ( filename ) <p>Function. Set the file name of the template to be used. If no path is specified file name will be relative to the current request directory</p> WebDyneTemplate <p>Directive. Can be used to supply the template file name in a Apache or lighttpd/FastCGI configuration file.</p> <p>Example:</p> <p>The template:</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n&lt;block name=\"head\" display=\"1\"&gt;\n&lt;title&gt;Template&lt;/title&gt;\n&lt;/block&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;table width=\"100%\"&gt;\n\n&lt;tr&gt;\n&lt;td colspan=2 bgcolor=\"green\"&gt;\n&lt;span style=\"color:white;font-size:20px\"&gt;Site Name&lt;/span&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;tr&gt;\n&lt;td bgcolor=\"green\" width=\"100px\"&gt;\n&lt;p&gt;\nLeft\n&lt;p&gt;\nMenu\n&lt;p&gt;\nHere\n&lt;/td&gt;\n\n&lt;td bgcolor=\"white\"&gt;\n\n&lt;!-- Content goes here --&gt;\n&lt;block name=\"body\" display=\"1\"&gt;\nThis is where the content will go\n&lt;/block&gt;\n\n&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;tr&gt;\n&lt;td colspan=2 bgcolor=\"green\"&gt;\n&lt;span style=\"color:white\"&gt;\n&lt;perl method=\"copyright\"&gt;\nCopyright (C) ${year} Foobar corp.\n&lt;/perl&gt;\n&lt;/span&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n\n\n&lt;/table&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n__PERL__\n\nsub copyright {\n\n    shift()-&gt;render(year=&gt;((localtime)[5]+1900));\n\n}\n</code></pre> <p>Run</p> <p>The content, run to view resulting merge:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Content 1&lt;/title&gt;&lt;/head&gt;\n\n&lt;body&gt;\nThis is my super content !\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n__PERL__\n\nuse WebDyne::Template qw(template1.psp);\n</code></pre> <p>Run</p> <p>In real life it is not desirable to put the template name into every content file (as was done in the above example), nor would we want to have to \"use WebDyne::Template\" in every content file.</p> <p>To overcome this WebDyne::Template can read the template file name using the Apache dir_config function, and assign a template on a per location basis using the WebDyneTemplate directive. Here is a sample <code>httpd.conf</code> file:</p> <pre><code>&lt;Location /&gt;\n\nPerlHandler     WebDyne::Chain\nPerlSetVar      WebDyneChain    'WebDyne::Template'\nPerlSetVar      WebDyneTemplate '/path/to/template.psp'\n\n&lt;/Location&gt;\n</code></pre>"},{"location":"08_credits/","title":"Credits","text":"<p>WebDyne relies heavily on modules and code developed and open-sourced by other authors. Without Perl, and Perl modules such as mod_perl/PSGI, HTML::Tiny, HTML::TreeBuilder, Storable and many other, WebDyne would not be possible. To the authors of those modules - and all the other modules used to a lesser extent by WebDyne - I convey my thanks.</p>"},{"location":"09_miscellaneous/","title":"Miscellaneous","text":"<p>Things to note or information not otherwise contained elsewhere</p> How to check syntax on a PSP file <p>To check the syntax of a PSP file, specifically any Perl code in the __PERL__ section make sure you have a #!perl shebang after the __PERL__ delimiter as here:</p> <pre><code>&lt;start_html&gt;\nHello World &lt;? server_time() ?&gt;\n__PERL__\n#!perl\n\nsub server_time {\n    my 2==1; #Error here\n}\n</code></pre> <p>Then run the command <code>perl -x -c -w &lt;filename.psp&gt;</code>. This will check the file for syntax error and report back:</p> <pre><code>$ perl -c -w -x check.psp \nsyntax error at check.psp line 4, near \"my 2\"\ncheck.psp had compilation errors.\n</code></pre> How to pass $self ref if using processing instructions <p>If you use the processing instruction form of calling a perl method it will not pass the WebDyne object ref through to your perl code. You can pass it by supplying @_ as a param, or just shift() and your parameters:</p> <pre><code>&lt;start_html&gt;\nHello World &lt;? server_time(@_) ?&gt;\nHello World &lt;? server_time(shift(), 'UTC' ?&gt;\nHello World &lt;perl handler=\"server_time\" param=\"UTC\"/&gt;\n__PERL__\n\nsub server_time {\n    #  Now we can get self ref\n    my ($self, $timezone)=@_;\n    #  Do something and return\n}\n</code></pre> Use of hash characters for comments in .psp files <p>Any # characters at the very start of a PSP file before a &lt;html&gt; or &lt;start_html&gt; tag are treated as comments and discarded - they will not be stored or displayed (they are not translated into HTML comments). This allows easy to read comments at the start of .psp files. Any # characters after the first valid tag are not treated specially - they will be rendered as normal HTML:</p> <pre><code>#  This is my server time display file\n#  \n#  VERSION=1.23\n#\n&lt;start_html&gt;\nServer local time is: &lt;? localtime ?&gt;\n</code></pre> The &lt;checkbox&gt; tag will always set a hidden form field <p>The &lt;checkbox&gt; tag is unusual in that it adds a hidden field (with the same name as the checkbox) to the HTML page to retain state. Thus if you are examining the checkbox parameter from CGI via <code>$_{'checkbox_name'}</code> or <code>$self-&gt;CGI-&gt;param('checkbox_name')</code> you may get an array rather than a single value. The value of the checkbox (boolean, checked or unchecked, i.e. 1 or 0) will always be the first value returned. So the code <code>if ($_{'checkbox_name'}) { .. do_something }</code> will work as expected - but just be careful if using in an array context.</p>"},{"location":"10_legal_information_licensing_and_copyright/","title":"Legal Information - Licensing and Copyright","text":"<p>WebDyne is Copyright \u00a9 Andrew Speer 2006-2025. WebDyne is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p> <p>WebDyne is written in Perl and uses modules from CPAN (the Comprehensive Perl Archive Network). CPAN modules are Copyright \u00a9 the owner/author, and are available in source form by downloading from CPAN directly. All CPAN modules used are covered by the Perl Artistic License</p>"}]}